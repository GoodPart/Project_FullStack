{"version":3,"sources":["redux/reducers/userReducer.js","redux/reducers/dataReducer.js","redux/reducers/uiReducer.js","redux/store.js","redux/types.js","redux/actions/userActions.js","util/MyButton.js","redux/actions/dataActions.js","components/scream/PostScream.js","components/layout/Notifications.js","components/layout/Navbar.js","util/AuthRoute.js","components/scream/DeleteScream.js","components/scream/LikeButton.js","components/scream/Comments.js","components/scream/CommentForm.js","components/scream/ScreamDialog.js","components/scream/Scream.js","components/profile/EditDetails.js","util/ProfileSkeleton.js","components/profile/Profile.js","util/screamSkeleton.js","pages/home.js","pages/login.js","pages/signup.js","components/profile/StaticProfile.js","pages/user.js","App.js","util/theme.js","serviceWorker.js","index.js","images/no-img.png","images/icon.png"],"names":["initialState","authenticated","loading","credentials","likes","notifications","screams","scream","errors","middleware","thunk","reducers","combineReducers","user","state","action","type","payload","userHandle","handle","screamId","filter","like","forEach","not","read","data","index","findIndex","index2","splice","comments","UI","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","logoutUser","dispatch","localStorage","removeItem","axios","defaults","headers","common","getUserData","get","then","res","console","log","catch","err","setAuthorizationHeader","token","FBIdToken","setItem","children","onClick","tip","btnClassName","tipClassName","title","className","placement","clearErrors","PostScream","open","body","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","preventDefault","postScream","nextProps","this","classes","MyButton","onClose","fullWidth","maxWidth","closeButton","onSubmit","label","multiline","rows","placeholder","error","helperText","TextField","onChange","variant","color","submitButton","disabled","size","progressSpinner","Component","connect","newScream","post","response","withStyles","theme","position","float","marginTop","left","top","Notifications","anchorEl","onMenuOpened","unreadNotificationsIds","map","notificationId","markNotificationsRead","notificationsIcon","dayjs","extend","relativeTime","length","badgeContent","notificationsMarkup","verb","time","createdAt","fromNow","iconColor","icon","style","marginRight","key","component","Link","to","recipient","sender","aria-owns","undefined","aria-haspopup","Boolean","onEntered","notificationIds","Navbar","rest","render","DeleteScream","deleteScream","deleteButton","delete","LikeButton","likedScream","find","likeScream","unlikeScream","mapActionsToProps","Comments","container","comment","userImage","item","sm","src","alt","commentImage","commentData","format","invisibleSeparator","visibleSeparator","height","objectFit","borderRadius","marginLeft","CommentForm","submitComment","textAlign","button","ScreamDialog","oldPath","newPath","location","pathname","history","pushState","getScream","openDialog","likeCount","commentCount","dialogMarkup","spinnerDiv","thickness","spacing","profileImage","expendButton","dialogContent","padding","margin","Scream","card","image","content","display","marginBottom","minWidth","EditDetails","bio","website","mapUserDetailsToState","userDetails","editUserDetails","backgroundColor","palette","primary","main","width","fullLine","halfLine","paper","profile","NoImg","Profile","handleImageChange","files","formData","FormData","append","uploadImage","handleEitPicture","document","getElementById","click","handleLogout","imageUrl","parer","id","hidden","href","rel","align","buttons","cardContent","flexDirection","cover","date","Array","from","CardContent","home","getScreams","recentScreamsMarkup","xs","login","userData","email","password","loginUser","form","AppIcon","pageTitle","noValidate","textField","general","customError","progress","push","signup","newUserData","confirmPassword","signupUser","screamIdParam","match","params","screamsMarkup","createMuiTheme","light","dark","contrastText","secondary","typography","useNextVariants","fontSize","border","borderBottom","verticalAlign","baseURL","jwtDecode","exp","Date","now","App","exact","path","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"68BAEA,IAAMA,EAAe,CACjBC,eAAe,EACfC,SAAS,EACTC,YAAa,GACbC,MAAO,GACPC,cAAe,I,ykBCLnB,IAAML,EAAe,CACjBM,QAAS,GACTC,OAAQ,GACRL,SAAS,G,ykBCHb,IAAMF,EAAe,CACjBE,SAAS,EACTM,OAAQ,MCaNC,EAAa,CAACC,KAGdC,EAAWC,YAAgB,CAC7BC,KHXW,WAAwC,IAA/BC,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAOA,EAAOC,MACV,IIXyB,oBJYrB,OAAO,EAAP,GACOF,EADP,CAEIb,eAAe,IAEvB,IIf+B,0BJgB3B,OAAOD,EACX,IIhBgB,WJiBZ,OAAO,EAAP,CACIC,eAAe,EACfC,SAAS,GACNa,EAAOE,SAElB,IIrBoB,eJsBhB,OAAO,EAAP,GACOH,EADP,CAEIZ,SAAS,IAEjB,IIbmB,cJcf,OAAO,EAAP,GACOY,EADP,CAEIV,MAAM,GAAD,mBACEU,EAAMV,OADR,CAED,CACIc,WAAYJ,EAAMX,YAAYgB,OAC9BC,SAAUL,EAAOE,QAAQG,cAIzC,IIvBsB,gBJwBlB,OAAO,EAAP,GACON,EADP,CAEIV,MAAOU,EAAMV,MAAMiB,QAAO,SAAAC,GAAI,OAAIA,EAAKF,WAAaL,EAAOE,QAAQG,cAE3E,IIzC+B,0BJ2C3B,OADAN,EAAMT,cAAckB,SAAQ,SAACC,GAAD,OAAUA,EAAIC,MAAO,KAC1C,EAAP,GACOX,GAEX,QACI,OAAOA,IG9BfY,KFbW,WAAwC,IAA/BZ,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAOA,EAAOC,MACV,IGAoB,eHChB,OAAO,KACAF,EADP,CAEIZ,SAAS,IAEjB,IGDoB,cHEhB,OAAO,KACAY,EADP,CAEIR,QAASS,EAAOE,QAChBf,SAAS,IAEjB,IGNkB,aHOd,OAAO,KACAY,EADP,CAEIP,OAAQQ,EAAOE,UAEvB,IGVmB,cHWnB,IGVsB,gBHWlB,IAAIU,EAAQb,EAAMR,QAAQsB,WAAU,SAACrB,GAAD,OAAYA,EAAOa,WAAaL,EAAOE,QAAQG,YAMnF,OALAN,EAAMR,QAAQqB,GAASZ,EAAOE,QAE3BH,EAAMP,OAAOa,WAAaL,EAAOE,QAAQG,WACxCN,EAAMP,OAASQ,EAAOE,SAEnB,KACAH,GAGX,IGpBqB,gBHsBjB,IAAIe,EAASf,EAAMR,QAAQsB,WAAU,SAAArB,GAAM,OAAIA,EAAOa,WAAaL,EAAOE,WAE1E,OADAH,EAAMR,QAAQwB,OAAOD,EAAQ,GACtB,KACAf,GAEX,IG1BmB,cH2Bf,OAAO,KACAA,EADP,CAEIR,QAAQ,CACJS,EAAOE,SADJ,mBAEAH,EAAMR,YAGrB,IGjCsB,iBHkClB,OAAO,KACAQ,EADP,CAEIP,OAAO,KACAO,EAAMP,OADP,CAEFwB,SAAS,CAAEhB,EAAOE,SAAV,mBAAsBH,EAAMP,OAAOwB,eAGvD,QACA,OAAOjB,IExCXkB,GDhBW,WAAwC,IAA/BlB,EAA8B,uDAAtBd,EAAce,EAAQ,uCAClD,OAAOA,EAAOC,MACV,IEDkB,aFEd,OAAO,KACAF,EADP,CAEIZ,SAAS,EACTM,OAAQO,EAAOE,UAEvB,IELoB,eFMhB,OAAO,KACAH,EADP,CAEIZ,SAAS,EACTM,OAAQ,OAEhB,IEZkB,aFad,OAAO,KACAM,EADP,CAEIZ,SAAQ,IAEhB,IEduB,kBFenB,OAAO,KACAY,EADP,CAEIZ,SAAS,IAEjB,QACA,OAAOY,MCHAmB,EAFDC,YAAYvB,EAbL,GAa6BwB,YAAQC,IAAe,WAAf,EAAmB3B,GAAa4B,OAAOC,8BAAgCD,OAAOC,iC,iBEU3HC,EAAa,kBAAM,SAACC,GAC7BC,aAAaC,WAAW,oBACjBC,IAAMC,SAASC,QAAQC,OAAvB,cACPN,EAAS,CAAExB,KDtCwB,8BC0C1B+B,EAAc,kBAAM,SAACP,GAC9BA,EAAS,CAAExB,KDzCa,iBC0CxB2B,IACKK,IAAI,SACJC,MAAK,SAAAC,GACFC,QAAQC,IAAI,YAAYF,EAAIxB,MAE5Bc,EAAS,CACLxB,KDjDQ,WCkDRC,QAASiC,EAAIxB,UAGpB2B,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QAkC5BC,EAAyB,SAACC,GAC5B,IAAMC,EAAS,iBAAaD,GACtBf,aAAaiB,QAAQ,YAAaD,GAClCd,IAAMC,SAASC,QAAQC,OAAvB,cAAiDW,G,kCCzF5C,kBAAGE,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAAMC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,aAA1C,OACX,kBAAC,IAAD,CAASC,MAAOH,EAAKI,UAAWF,EAAcG,UAAU,OACpD,kBAAC,IAAD,CAAYN,QAASA,EAASK,UAAWH,GACpCH,K,yKCiJAQ,GAAc,kBAAM,SAAA3B,GAC/BA,EAAS,CACPxB,KHhJwB,mB,+NIS5B,IAiBMoD,G,2MACFtD,MAAQ,CACJuD,MAAO,EACPC,KAAM,GACN9D,OAAQ,I,EAgBZ+D,WAAY,WACR,EAAKC,SAAS,CACVH,MAAM,K,EAGdI,YAAa,WACT,EAAKC,MAAMP,cACX,EAAKK,SAAS,CACVH,MAAM,EACN7D,OAAQ,M,EAGhBmE,aAAe,SAACC,GACZ,EAAKJ,SAAL,eACKI,EAAMC,OAAOC,KAAQF,EAAMC,OAAOE,S,EAG3CC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKP,MAAMQ,WAAW,CAAEZ,KAAO,EAAKxD,MAAMwD,Q,yFAjCpBa,GACnBA,EAAUnD,GAAGxB,QACZ4E,KAAKZ,SAAS,CACVhE,OAAO2E,EAAUnD,GAAGxB,SAGxB2E,EAAUnD,GAAGxB,QAAW2E,EAAUnD,GAAG9B,SACrCkF,KAAKZ,SAAS,CACVF,KAAM,GACND,MAAM,EACN7D,OAAQ,O,+BA0BV,IACCA,EAAU4E,KAAKtE,MAAfN,OADF,EAE6B4E,KAAKV,MAAhCW,EAFF,EAEEA,QAAcnF,EAFhB,EAEW8B,GAAK9B,QAErB,OACI,kBAAC,WAAD,KACI,kBAACoF,EAAD,CAAU1B,QAASwB,KAAKb,WAAYV,IAAI,kBACpC,kBAAC,KAAD,OAEJ,kBAAC,KAAD,CAAQQ,KAAMe,KAAKtE,MAAMuD,KAAMkB,QAAUH,KAAKX,YAAae,WAAS,EAACC,SAAS,MAC1E,kBAACH,EAAD,CAAUzB,IAAI,QAAQD,QAASwB,KAAKX,YAAaV,aAAcsB,EAAQK,aACnE,kBAAC,KAAD,OAEJ,kBAAC,KAAD,0BACA,kBAAC,KAAD,KACI,0BAAMC,SAAUP,KAAKJ,cACjB,kBAAC,IAAD,CACIF,KAAK,OACL9D,KAAK,OACL4E,MAAM,UACNC,WAAS,EAACC,KAAK,IACfC,YAAY,6BACZC,QAAOxF,EAAO8D,KACd2B,WAAYzF,EAAO8D,KACnBL,UAAWoB,EAAQa,UACnBC,SAAUf,KAAKT,aACfa,WAAS,IAEb,kBAAC,IAAD,CACIxE,KAAK,SACLoF,QAAQ,YACRC,MAAM,UACNpC,UAAWoB,EAAQiB,aACnBC,SAAUrG,GALd,SAQKA,GACG,kBAAC,KAAD,CAAkBsG,KAAM,GAAIvC,UAAWoB,EAAQoB,2B,GA/E1DC,aAoGVC,gBAJS,SAAC7F,GAAD,MAAW,CAC/BkB,GAAIlB,EAAMkB,MAKV,CAAEkD,WDrFoB,SAAA0B,GAAS,OAAI,SAAApE,GACrCA,EAAS,CACPxB,KH9CsB,eGgDxB2B,IACGkE,KAAK,UAAWD,GAChB3D,MAAK,SAAAC,GACJV,EAAS,CACPxB,KHzCmB,cG0CnBC,QAASiC,EAAIxB,OAEfc,EAAS2B,SAEVd,OAAM,SAAAC,GACLd,EAAS,CACPxB,KH5DkB,aG6DlBC,QAASqC,EAAIwD,SAASpF,YCqEZyC,gBAFHwC,CAGbI,KAxHa,SAAAC,GAAK,O,2WAAA,IACbA,EADa,CAEhBV,aAAe,CACXW,SAAU,WACVC,MAAO,QACPC,UAAW,IAEfV,gBAAiB,CACbQ,SAAU,YAEdvB,YAAc,CACVuB,SAAU,WACVG,KAAM,MACNC,IAAK,UA2GXN,CAAmB3C,K,8LCpHfkD,G,2MACFxG,MAAQ,CACJyG,SAAW,M,EAEfhD,WAAa,SAACK,GACV,EAAKJ,SAAS,CAAE+C,SAAW3C,EAAMC,U,EAErCJ,YAAc,WACV,EAAKD,SAAS,CAAC+C,SAAS,Q,EAE5BC,aAAe,WACX,IAAIC,EAAyB,EAAK/C,MAAMrE,cACvCgB,QAAO,SAACG,GAAD,OAAUA,EAAIC,QACrBiG,KAAI,SAAClG,GAAD,OAASA,EAAImG,kBACpB,EAAKjD,MAAMkD,sBAAsBH,I,wEAEzB,IAMFI,EANC,OACCxH,EAAiB+E,KAAKV,MAAMrE,cAC5BkH,EAAWnC,KAAKtE,MAAMyG,SAE5BO,KAAMC,OAAOC,MAKHH,EAFPxH,GAAkBA,EAAc4H,OAAS,GACxC5H,EAAcgB,QAAO,SAAAG,GAAG,OAAiB,IAAbA,EAAIC,QAAgBwG,OAAS,EAEjD,kBAAC,KAAD,CAAOC,aAAc7H,EAAcgB,QAAO,SAAAG,GAAG,OAAiB,IAAbA,EAAIC,QAAgBwG,OACrE5B,MAAM,aACF,kBAAC,KAAD,OAMQ,kBAAC,KAAD,MAExB,IAAI8B,EACA9H,GAAiBA,EAAc4H,OAAS,EACpC5H,EAAcqH,KAAI,SAAAlG,GACd,IAAM4G,EAAmB,SAAZ5G,EAAIR,KAAiB,QAAU,eACtCqH,EAAOP,KAAMtG,EAAI8G,WAAWC,UAC5BC,EAAYhH,EAAIC,KAAO,UAAY,YACnCgH,EAAoB,SAAbjH,EAAIR,KACb,kBAAC,KAAD,CAAcqF,MAAOmC,EAAWE,MAAO,CAACC,YAAc,MAEtD,kBAAC,KAAD,CAAUtC,MAAOmC,EAAWE,MAAO,CAACC,YAAc,MAGtD,OACI,kBAAC,KAAD,CAAUC,IAAKpH,EAAI8G,UAAW1E,QAAS,EAAKa,aACvCgE,EACD,kBAAC,KAAD,CACII,UAAWC,IACXzC,MAAM,UACND,QAAQ,QACR2C,GAAE,iBAAYvH,EAAIwH,UAAhB,mBAAoCxH,EAAIJ,WAErCI,EAAIyH,OANb,IAMsBb,EANtB,gBAMyCC,OAQrD,kBAAC,KAAD,CAAUzE,QAAWwB,KAAKX,aAA1B,iCAIR,OACI,kBAAC,WAAD,KACI,kBAAC,KAAD,CAASP,UAAU,MAAMF,MAAM,iBAC3B,kBAAC,IAAD,CAAYkF,YAAW3B,EAAW,mBAAe4B,EAC7CC,gBAAc,OACdxF,QAASwB,KAAKb,YAETsD,IAGb,kBAAC,KAAD,CACIN,SAAUA,EACVlD,KAAMgF,QAAQ9B,GACdhC,QAASH,KAAKX,YACd6E,UAAWlE,KAAKoC,cAEXW,Q,GArFGzB,aAsGbC,gBAJS,SAAA7F,GAAK,MAAI,CAC7BT,cAAeS,EAAMD,KAAKR,iBAGU,CAACuH,sBJ9CJ,SAAC2B,GAAD,OAAqB,SAAA/G,GACtDG,IAAMkE,KAAK,iBAAkB0C,GAC5BtG,MAAK,SAAAC,GACFV,EAAS,CACLxB,KD9E2B,+BCiFlCqC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,SIuCfqD,CAAkDW,I,6DC7GpDkC,GAAb,iLACc,IACEvJ,EAAmBmF,KAAKV,MAAxBzE,cACR,OACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAASgE,UAAU,iBAEdhE,EACG,kBAAC,WAAD,KACI,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAM8I,GAAG,KACT,kBAACzD,EAAD,CAAUzB,IAAI,QACV,kBAAC,KAAD,QAIA,kBAAC,GAAD,OAKR,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAQgF,UAAWC,IAAMC,GAAG,SAAS1C,MAAM,WAA3C,SACA,kBAAC,IAAD,CAAQwC,UAAWC,IAAMC,GAAG,IAAI1C,MAAM,WAAtC,QACA,kBAAC,IAAD,CAAQwC,UAAWC,IAAMC,GAAG,SAAS1C,MAAM,WAA3C,iBAxB5B,GAA4BK,aA0CbC,gBAJS,SAAA7F,GAAK,MAAK,CAC9Bb,cAAgBa,EAAMD,KAAKZ,iBAGhB0G,CAAyB6C,I,UCpCzB7C,gBARQ,SAAC7F,GAAD,MAAW,CAC9Bb,cAAea,EAAMD,KAAKZ,iBAOf0G,EAjBG,SAAC,GAAD,IAAaD,EAAb,EAAEmC,UAAsB5I,EAAxB,EAAwBA,cAAkBwJ,EAA1C,qDACd,kBAAC,IAAD,iBACQA,EADR,CAEQC,OAAQ,SAAChF,GAAD,OACc,IAAlBzE,EAAyB,kBAAC,IAAD,CAAU8I,GAAG,MAAQ,kBAACrC,EAAchC,U,6DCcvEiF,G,2MACF7I,MAAQ,CACJuD,MAAO,G,EAGXE,WAAa,WACT,EAAKC,SAAS,CACVH,MAAM,K,EAGdI,YAAc,WACV,EAAKD,SAAS,CACVH,MAAM,K,EAGduF,aAAe,WACX,EAAKlF,MAAMkF,aAAa,EAAKlF,MAAMtD,UACnC,EAAKoD,SAAS,CACVH,MAAM,K,wEAGJ,IACEgB,EAAYD,KAAKV,MAAjBW,QACR,OACI,kBAAC,WAAD,KACI,kBAACC,EAAD,CAAUzB,IAAI,gBACVD,QAASwB,KAAKb,WACdT,aAAcuB,EAAQwE,cAElB,kBAAC,KAAD,CAAexD,MAAM,eAEzB,kBAAC,KAAD,CACIhC,KAAMe,KAAKtE,MAAMuD,KACjBkB,QAASH,KAAKX,YACde,WAAS,EACTC,SAAS,MAEL,kBAAC,KAAD,sDAGA,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAQ7B,QAASwB,KAAKX,YAAa4B,MAAM,WAAzC,UAGA,kBAAC,IAAD,CAAQzC,QAASwB,KAAKwE,aAAcvD,MAAM,aAA1C,iB,GA5CLK,aA4DZC,eAAQ,KAAM,CAACiD,aLqCF,SAAAxI,GAAQ,OAAI,SAAAoB,GACtCW,QAAQC,IAAI,WAAYhC,GACxBuB,IACGmH,OADH,kBACqB1I,IAClB6B,MAAK,WACJT,EAAS,CACPxB,KH3GqB,gBG4GrBC,QAASG,OAGZiC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,SK/CfqD,CAA8BI,IApE9B,CACX8C,aAAe,CACX5C,SAAW,WACXG,KAAM,MACNC,IAAK,QAgEgCN,CAAmB4C,K,qBCvEnDI,GAAb,2MACIC,YAAc,WACV,SAAG,EAAKtF,MAAM7D,KAAKT,QAAS,EAAKsE,MAAM7D,KAAKT,MAAM6J,MAAK,SAAA3I,GAAI,OAAIA,EAAKF,WAAa,EAAKsD,MAAMtD,cAFpG,EAMI8I,WAAa,WACT,EAAKxF,MAAMwF,WAAW,EAAKxF,MAAMtD,WAPzC,EASI+I,aAAe,WACX,EAAKzF,MAAMyF,aAAa,EAAKzF,MAAMtD,WAV3C,wEAiCQ,OAnB0BgE,KAAKV,MAAM7D,KAA7BZ,cASJmF,KAAK4E,cACD,kBAAC1E,EAAD,CAAUzB,IAAI,YAAYD,QAASwB,KAAK+E,cACpC,kBAAC,KAAD,CAAc9D,MAAM,aAGxB,kBAACf,EAAD,CAAUzB,IAAI,OAAOD,QAASwB,KAAK8E,YAC/B,kBAAC,KAAD,CAAiB7D,MAAM,aAZ/B,kBAAC,IAAD,CAAM0C,GAAG,UACL,kBAACzD,EAAD,CAAUzB,IAAI,QACV,kBAAC,KAAD,CAAiBwC,MAAM,kBAnB3C,GAAgCK,aAgD1B0D,GAAoB,CACtBF,WNcsB,SAAA9I,GAAQ,OAAI,SAAAoB,GACpCG,IACGK,IADH,kBACkB5B,EADlB,UAEG6B,MAAK,SAAAC,GACJV,EAAS,CACPxB,KH/DmB,cGgEnBC,QAASiC,EAAIxB,UAGhB2B,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QMtB1B6G,aN2BwB,SAAA/I,GAAQ,OAAI,SAAAoB,GACtCG,IACGK,IADH,kBACkB5B,EADlB,YAEG6B,MAAK,SAAAC,GACJV,EAAS,CACPxB,KH5EsB,gBG6EtBC,QAASiC,EAAIxB,UAGhB2B,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,SMhCfqD,gBAVS,SAAC7F,GAAD,MAAY,CAChCD,KAAMC,EAAMD,QASwBuJ,GAAzBzD,CAA6CoD,I,+NCzD5D,IAcMM,G,iLACQ,IAAD,EACyBjF,KAAKV,MAA3B3C,EADH,EACGA,SAAUsD,EADb,EACaA,QAClB,OACI,kBAAC,KAAD,CAAMiF,WAAS,GAEVvI,EAAS2F,KAAI,SAAC6C,EAAS5I,GAAU,IACtB2C,EAA0CiG,EAA1CjG,KAAMgE,EAAoCiC,EAApCjC,UAAWkC,EAAyBD,EAAzBC,UAAWtJ,EAAcqJ,EAAdrJ,WAEpC,OAEI,kBAAC,WAAD,CAAU0H,IAAKN,GACX,kBAAC,KAAD,CAAMmC,MAAI,EAACC,GAAI,IACX,kBAAC,KAAD,CAAMJ,WAAS,GACX,kBAAC,KAAD,CAAMG,MAAI,EAACC,GAAI,GACX,yBAAKC,IAAKH,EAAWI,IAAI,UAAU3G,UAAWoB,EAAQwF,gBAE1D,kBAAC,KAAD,CAAMJ,MAAI,EAACC,GAAI,GACX,yBAAKzG,UAAWoB,EAAQyF,aACpB,kBAAC,KAAD,CACI1E,QAAQ,KACRyC,UAAWC,IACXC,GAAE,iBAAY7H,GACdmF,MAAM,WAELnF,GAEL,kBAAC,KAAD,CAAYkF,QAAQ,QAAQC,MAAM,iBAC7ByB,KAAMQ,GAAWyC,OAAO,yBAE7B,wBAAI9G,UAAWoB,EAAQ2F,qBACvB,kBAAC,KAAD,CAAY5E,QAAQ,SAAS9B,OAM5C3C,IAAUI,EAASkG,OAAQ,GACxB,wBAAIhE,UAAWoB,EAAQ4F,4B,GAtChCvE,aAsDRK,QApEA,SAAAC,GAAK,O,2WAAA,IACbA,EADa,CAEhB6D,aAAc,CACVpF,SAAU,OACVyF,OAAQ,IACRC,UAAW,QACXC,aAAc,OAElBN,YAAa,CACTO,WAAY,QA2DLtE,CAAmBsD,I,+NChElC,IAIaiB,GAAb,2MACIxK,MAAO,CACHwD,KAAM,GACN9D,OAAQ,IAHhB,EAsBImE,aAAe,SAACC,GACZ,EAAKJ,SAAL,eACKI,EAAMC,OAAOC,KAASF,EAAMC,OAAOE,SAxBhD,EA4BIC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKP,MAAM6G,cAAc,EAAK7G,MAAMtD,SAAU,CAAEkD,KAAM,EAAKxD,MAAMwD,QA9BzE,yFAO8Ba,GAEnBA,EAAUnD,GAAGxB,QACZ4E,KAAKZ,SAAS,CACVhE,OAAQ2E,EAAUnD,GAAGxB,SAIzB2E,EAAUnD,GAAGxB,QAAW2E,EAAUnD,GAAG9B,SACrCkF,KAAKZ,SAAS,CACVF,KAAM,OAjBtB,+BAiCc,IAAD,EAC6Bc,KAAKV,MAA/BW,EADH,EACGA,QAASpF,EADZ,EACYA,cACXO,EAAS4E,KAAKtE,MAAMN,OAwB1B,OArB0BP,EACtB,kBAAC,KAAD,CAAMwK,MAAI,EAACC,GAAI,GAAIhC,MAAO,CAAE8C,UAAW,WACnC,0BAAM7F,SAAUP,KAAKJ,cACjB,kBAAC,IAAD,CACIF,KAAK,OACL9D,KAAK,OACL4E,MAAM,oBACNI,QAAOxF,EAAO+J,QACdtE,WAAYzF,EAAO+J,QACnBxF,MAAOK,KAAKtE,MAAMwD,KAClB6B,SAAUf,KAAKT,aACfa,WAAS,EACTvB,UAAWoB,EAAQa,YAEvB,kBAAC,IAAD,CAAQlF,KAAK,SAASoF,QAAQ,YAAYC,MAAM,UAAUpC,UAAWoB,EAAQoG,QAA7E,WAIJ,wBAAIxH,UAAWoB,EAAQ4F,oBAE5B,SA1DX,GAAiCvE,aA6ElBC,gBALS,SAAA7F,GAAK,MAAK,CAC9BkB,GAAIlB,EAAMkB,GACV/B,cAAea,EAAMD,KAAKZ,iBAGU,CAACsL,cRQZ,SAACnK,EAAU0J,GAAX,OAA2B,SAAAtI,GACtDG,IACGkE,KADH,kBACmBzF,EADnB,YACuC0J,GACpC7H,MAAK,SAAAC,GACJV,EAAS,CACPxB,KHtFsB,iBGuFtBC,QAASiC,EAAIxB,OAEfc,EAAS2B,SAEVd,OAAM,SAAAC,GACLd,EAAS,CACPxB,KH1GkB,aG2GlBC,QAASqC,EAAIwD,SAASpF,aQrBfiF,CAA2CI,KAjF3C,SAAAC,GAAK,O,2WAAA,IACbA,KAgFmDD,CAAmBuE,K,oPCrE7E,IAyBMI,G,2MAEJ5K,MAAQ,CACNuD,MAAM,EACNsH,QAAS,GACTC,QAAU,I,EAUZrH,WAAa,WAEX,IAAIoH,EAAUtJ,OAAOwJ,SAASC,SAFb,EAKgB,EAAKpH,MAA9BxD,EALS,EAKTA,WAAYE,EALH,EAKGA,SAEdwK,EAAO,iBAAa1K,EAAb,mBAAkCE,GAE5CuK,IAAYC,IAASD,EAAO,iBAAazK,IAI5CmB,OAAO0J,QAAQC,UAAU,KAAM,KAAMJ,GAGrC,EAAKpH,SAAS,CACZH,MAAM,EACNsH,UACAC,YAGF,EAAKlH,MAAMuH,UAAU,EAAKvH,MAAMtD,W,EAElCqD,YAAc,WAEZpC,OAAO0J,QAAQC,UAAU,KAAM,KAAM,EAAKlL,MAAM6K,SAChD,EAAKnH,SAAS,CACZH,MAAM,IAER,EAAKK,MAAMP,e,mFArCPiB,KAAKV,MAAMwH,YAGb9G,KAAKb,e,+BAqCA,MAeHa,KAAKV,MAZPW,EAHK,EAGLA,QAHK,IAIL9E,OACEa,EALG,EAKHA,SACAkD,EANG,EAMHA,KACAgE,EAPG,EAOHA,UACA6D,EARG,EAQHA,UACAC,EATG,EASHA,aACA5B,EAVG,EAUHA,UACAtJ,EAXG,EAWHA,WACAa,EAZG,EAYHA,SAOEsK,EAnBC,EAcLrK,GAAM9B,QAON,yBAAK+D,UAAWoB,EAAQiH,YACtB,kBAAC,KAAD,CAAkB9F,KAAM,IAAK+F,UAAW,KAI1C,kBAAC,KAAD,CAAMjC,WAAS,EAACkC,QAAS,IACvB,kBAAC,KAAD,CAAM/B,MAAI,EAACC,GAAI,GAEb,yBACEC,IACEH,GAEI,iGAENI,IAAI,UACJ3G,UAAWoB,EAAQoH,gBAGvB,kBAAC,KAAD,CAAMhC,MAAI,EAACC,GAAI,GAEb,kBAAC,KAAD,CACE7B,UAAWC,IACXzC,MAAM,UACND,QAAQ,KACR2C,GAAE,gBAAW7H,IAJf,IAMIA,GAEJ,wBAAI+C,UAAWoB,EAAQ2F,qBAEvB,kBAAC,KAAD,CAAY5E,QAAQ,QAAQC,MAAM,iBAC/ByB,KAAMQ,GAAWyC,OAAO,yBAE3B,wBAAI9G,UAAWoB,EAAQ2F,qBAEvB,kBAAC,KAAD,CAAY5E,QAAQ,SAAS9B,GAC7B,kBAAC,GAAD,CAAYlD,SAAUA,IACtB,8BAAO+K,EAAP,UACA,kBAAC7G,EAAD,CAAUzB,IAAI,YACZ,kBAAC,KAAD,CAAUwC,MAAM,aAElB,8BAAO+F,EAAP,cAGF,wBAAInI,UAAWoB,EAAQ4F,mBACvB,kBAAC,GAAD,CAAa7J,SAAUA,IAEvB,kBAAC,GAAD,CAAUW,SAAUA,KAGxB,OACE,kBAAC,WAAD,KAEE,kBAACuD,EAAD,CACE1B,QAASwB,KAAKb,WACdV,IAAI,gBACJE,aAAcsB,EAAQqH,cAGtB,kBAAC,KAAD,CAAYrG,MAAM,aAGpB,kBAAC,KAAD,CACEhC,KAAMe,KAAKtE,MAAMuD,KACjBkB,QAASH,KAAKX,YACde,WAAS,EACTC,SAAS,MAET,kBAACH,EAAD,CACEzB,IAAI,QACJD,QAASwB,KAAKX,YACdV,aAAcsB,EAAQK,aAGtB,kBAAC,KAAD,OAGF,kBAAC,KAAD,CAAezB,UAAWoB,EAAQsH,eAC/BN,S,GAnJc3F,aAyKrB0D,GAAoB,CACxB6B,UTxLuB,SAAA7K,GAAQ,OAAI,SAAAoB,GACnCA,EAAS,CAAExB,KH5Ba,eG6BxB2B,IACGK,IADH,kBACkB5B,IACf6B,MAAK,SAAAC,GACJV,EAAS,CACPxB,KH1BkB,aG2BlBC,QAASiC,EAAIxB,OAEfc,EAAS,CACPxB,KHlCuB,uBGqC1BqC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QS4K5Ba,gBAGawC,gBAVS,SAAA7F,GAAK,MAAK,CAChCP,OAAQO,EAAMY,KAAKnB,OACnByB,GAAIlB,EAAMkB,MAUVoI,GAFazD,CAGbI,KA1Ma,SAAAC,GAAK,O,2WAAA,IACfA,EADe,CAElByF,aAAc,CACZhH,SAAU,IACVyF,OAAQ,IACRE,aAAc,MACdD,UAAW,SAEbwB,cAAe,CACbC,QAAS,IAEXlH,YAAa,CACXuB,SAAU,WACVG,KAAM,OAERsF,aAAc,CACZzF,SAAU,WACVG,KAAM,OAERkF,WAAY,CACVd,UAAW,SACXqB,OAAQ,iBAqLV9F,CAAmB2E,K,4DC/LRoB,GAAb,iLAEIhF,KAAMC,OAAOC,MADN,MAiBH5C,KAAKV,MAdPW,EAHK,EAGLA,QAHK,IAIL9E,OACE+D,EALG,EAKHA,KACAgE,EANG,EAMHA,UACAkC,EAPG,EAOHA,UACAtJ,EARG,EAQHA,WACAE,EATG,EASHA,SACA+K,EAVG,EAUHA,UACAC,EAXG,EAWHA,aAXG,IAaLvL,KACEZ,EAdG,EAcHA,cACekB,EAfZ,EAeHhB,YAAegB,OAKb0I,EACJ5J,GAAiBiB,IAAeC,EAC9B,kBAAC,GAAD,CAAcC,SAAUA,IACtB,KAEN,OACE,kBAAC,KAAD,CAAM6C,UAAWoB,EAAQ0H,MACvB,kBAAC,KAAD,CAEEC,MAAOxC,EACPxG,MAAM,gBACNC,UAAWoB,EAAQ2H,QAGrB,kBAAC,KAAD,CAAa/I,UAAWoB,EAAQ4H,SAE9B,kBAAC,KAAD,CACE7G,QAAQ,KACRyC,UAAWC,IACXC,GAAE,iBAAY7H,GACdmF,MAAM,WAELnF,GAEF2I,EACD,kBAAC,KAAD,CAAYzD,QAAQ,QAAQC,MAAM,iBAC/ByB,KAAMQ,GAAWC,WAEpB,kBAAC,KAAD,CAAYnC,QAAQ,SAAS9B,GAC7B,kBAAC,GAAD,CAAYlD,SAAUA,IACtB,8BAAO+K,EAAP,UACA,kBAAC7G,EAAD,CAAUzB,IAAI,YACZ,kBAAC,KAAD,CAAUwC,MAAM,aAElB,8BAAO+F,EAAP,aACA,kBAAC,GAAD,CACEhL,SAAUA,EACVF,WAAYA,EACZgL,WAAY9G,KAAKV,MAAMwH,mBA3DnC,GAA4BxF,aA8EbC,gBAJS,SAAA7F,GAAK,MAAK,CAChCD,KAAMC,EAAMD,QAGC8F,CAAyBI,IA7FzB,CACbgG,KAAM,CACJ9F,SAAU,WACViG,QAAS,OACTC,aAAc,IAEhBH,MAAO,CACLI,SAAU,KAEZH,QAAS,CACPL,QAAS,GACTzB,UAAW,UAkFyBpE,CAAmB+F,K,mPC7F3D,IAOMO,G,2MAEFvM,MAAQ,CACJwM,IAAK,GACLC,QAAU,GACV1B,SAAU,GACVxH,MAAM,G,EAGVmJ,sBAAwB,SAACrN,GACrB,EAAKqE,SAAS,CACV8I,IAAKnN,EAAYmN,IAAMnN,EAAYmN,IAAM,GACzCC,QAASpN,EAAYoN,QAAUpN,EAAYoN,QAAU,GACrD1B,SAAU1L,EAAY0L,SAAW1L,EAAY0L,SAAW,M,EAKhEtH,WAAa,WACT,EAAKC,SAAS,CACVH,MAAM,IAEV,EAAKmJ,sBAAsB,EAAK9I,MAAMvE,c,EAG1CsE,YAAc,WACV,EAAKD,SAAS,CACVH,MAAM,K,EAWdM,aAAe,SAACC,GACZ,EAAKJ,SAAL,eACKI,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,S,EAI1CC,aAAe,WACX,IAAMyI,EAAc,CAChBH,IAAK,EAAKxM,MAAMwM,IAChBC,QAAS,EAAKzM,MAAMyM,QACpB1B,SAAU,EAAK/K,MAAM+K,UAIzB,EAAKnH,MAAMgJ,gBAAgBD,GAC3B,EAAKhJ,e,mFArBY,IACTtE,EAAgBiF,KAAKV,MAArBvE,YACRiF,KAAKoI,sBAAsBrN,K,+BAuBrB,IAECkF,EAAWD,KAAKV,MAAhBW,QAEP,OACI,kBAAC,WAAD,KACI,kBAACC,EAAD,CAAUzB,IAAI,eAAeD,QAASwB,KAAKb,WAAYT,aAAcuB,EAAQoG,QACzE,kBAAC,KAAD,CAAUpF,MAAM,aAEpB,kBAAC,KAAD,CACAhC,KAAMe,KAAKtE,MAAMuD,KACjBkB,QAASH,KAAKX,YACde,WAAS,EACTC,SAAS,MACL,kBAAC,KAAD,+DACA,kBAAC,KAAD,KACI,8BACI,kBAAC,IAAD,CACAX,KAAK,MACL9D,KAAK,OACL4E,MAAM,MACNC,WAAS,EACTC,KAAK,IACLC,YAAY,4BACZ9B,UAAWoB,EAAQa,UACnBnB,MAAOK,KAAKtE,MAAMwM,IAClBnH,SAAUf,KAAKT,aACfa,WAAS,IAET,kBAAC,IAAD,CACAV,KAAK,UACL9D,KAAK,OACL4E,MAAM,UACNG,YAAY,qCACZ9B,UAAWoB,EAAQa,UACnBnB,MAAOK,KAAKtE,MAAMyM,QAClBpH,SAAUf,KAAKT,aACfa,WAAS,IAET,kBAAC,IAAD,CACAV,KAAK,WACL9D,KAAK,OACL4E,MAAM,WACNG,YAAY,iBACZ9B,UAAWoB,EAAQa,UACnBnB,MAAOK,KAAKtE,MAAM+K,SAClB1F,SAAUf,KAAKT,aACfa,WAAS,MAIjB,kBAAC,KAAD,KACI,kBAAC,IAAD,CAAQ5B,QAASwB,KAAKX,YAAa4B,MAAM,WAAzC,UAGA,kBAAC,IAAD,CAAQzC,QAASwB,KAAKJ,aAAcqB,MAAM,WAA1C,e,GAhHEK,aAmIXC,gBAJS,SAAC7F,GAAD,MAAY,CAChCX,YAAaW,EAAMD,KAAKV,eAGY,CAACuN,gBb3FV,SAACD,GAAD,OAAiB,SAACjL,GAC7CA,EAAS,CAAExB,KDjEa,iBCkExB2B,IAAMkE,KAAK,QAAS4G,GAEfxK,MAAK,WACFE,QAAQC,IAAI,kBAAmBqK,GAC/BjL,EAASO,QAEZM,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,SamFnBqD,CAA4CI,KA1I5C,SAACC,GAAD,O,2WAAA,IACRA,EADQ,CAEXyE,OAAS,CACLvE,MAAO,aAuI4CH,CAAmBsG,K,mUClJ9E,IAoDetG,QApDA,SAAAC,GAAK,O,2WAAA,IACbA,EADa,CAEhB7F,OAAQ,CACJ+J,OAAQ,GACRyC,gBAAiB3G,EAAM4G,QAAQC,QAAQC,KACvCC,MAAO,GACPlB,OAAQ,mBAEVmB,SAAU,CACR9C,OAAQ,GACRyC,gBAAiB,kBACjBI,MAAO,OACPZ,aAAc,IAEhBc,SAAU,CACR/C,OAAQ,GACRyC,gBAAiB,kBACjBI,MAAO,MACPZ,aAAc,QAkCPpG,EA9BS,SAACrC,GAAW,IACxBW,EAAYX,EAAZW,QACR,OACI,kBAAC,KAAD,CAAOpB,UAAWoB,EAAQ6I,OACtB,yBAAKjK,UAAWoB,EAAQ8I,SACpB,yBAAKlK,UAAU,iBACX,yBAAK0G,IAAKyD,KAAOxD,IAAI,UAAU3G,UAAU,mBAE7C,6BACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAWoB,EAAQlE,SACxB,6BACA,yBAAK8C,UAAWoB,EAAQ2I,WACxB,yBAAK/J,UAAWoB,EAAQ2I,WACxB,6BACA,kBAAC,KAAD,CAAY3H,MAAM,YANtB,IAMkC,0CAC9B,6BACA,kBAAC,KAAD,CAAUA,MAAM,YARpB,uBASI,6BACA,kBAAC,KAAD,CAAeA,MAAM,YAVzB,qB,wQCfhB,IAIMgI,G,2MAEFC,kBAAoB,SAAC1J,GACjB,IAAMoI,EAAQpI,EAAMC,OAAO0J,MAAM,GAE3BC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAAS1B,EAAOA,EAAMlI,MACtC,EAAKJ,MAAMiK,YAAYH,I,EAE3BI,iBAAmB,WACGC,SAASC,eAAe,cAChCC,S,EAEdC,aAAe,WACX,EAAKtK,MAAMnC,c,wEAEL,IAAD,EAWD6C,KAAKV,MATLW,EAFC,EAEDA,QAFC,IAGDxE,KAHC,IAIGV,YACIgB,EALP,EAKOA,OAAQmH,EALf,EAKeA,UAAW2G,EAL1B,EAK0BA,SAAU3B,EALpC,EAKoCA,IAAKC,EALzC,EAKyCA,QAAS1B,EALlD,EAKkDA,SAE/C3L,EAPH,EAOGA,QACAD,EARH,EAQGA,cAgER,OA3DqBC,EAyDd,kBAAC,GAAD,MAzDyBD,EAC5B,kBAAC,KAAD,CAAOgE,UAAWoB,EAAQ6J,OACtB,yBAAKjL,UAAWoB,EAAQ8I,SACpB,yBAAKlK,UAAU,iBACX,yBAAKA,UAAU,gBAAgB0G,IAAKsE,EAAUrE,IAAI,YAClD,2BAAO5J,KAAK,OAAOmO,GAAG,aAAaC,OAAO,SAASjJ,SAAUf,KAAKkJ,oBAClE,kBAAChJ,EAAD,CAAUzB,IAAI,uBAAuBD,QAASwB,KAAKwJ,iBAAkB9K,aAAa,UAC9E,kBAAC,KAAD,CAAUuC,MAAM,cAGxB,6BACA,yBAAKpC,UAAU,mBACX,kBAAC,KAAD,CAAS4E,UAAWC,IAAMC,GAAE,iBAAY5H,GAAUkF,MAAM,UAAUD,QAAQ,MAA1E,IACMjF,GAEN,6BACCmM,GAAO,kBAAC,KAAD,CAAYlH,QAAQ,SAASkH,GACrC,6BACCzB,GACG,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAYxF,MAAM,YADtB,IACmC,8BAAOwF,GAC1C,8BAGH0B,GACG,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAUlH,MAAM,YAChB,uBAAGgJ,KAAM9B,EAAS1I,OAAO,SAASyK,IAAI,uBACjC,IAAK/B,GAEV,8BAGR,kBAAC,KAAD,CAAelH,MAAM,YAtBzB,IAsBuC,IACnC,wCAAcyB,KAAMQ,GAAWyC,OAAO,cAG1C,kBAACzF,EAAD,CAAUzB,IAAI,SAASD,QAASwB,KAAK4J,cACjC,kBAAC,KAAD,CAAgB3I,MAAM,aAE1B,kBAAC,GAAD,QAIR,kBAAC,KAAD,CAAOpC,UAAWoB,EAAQ6J,OACtB,kBAAC,KAAD,CAAY9I,QAAQ,QAAQmJ,MAAM,UAAlC,wCAGA,yBAAKtL,UAAWoB,EAAQmK,SACpB,kBAAC,IAAD,CAAQpJ,QAAQ,YAAYC,MAAM,UAAUwC,UAAWC,IAAMC,GAAG,UAAhE,SAGA,kBAAC,IAAD,CAAQ3C,QAAQ,YAAYC,MAAM,YAAYwC,UAAWC,IAAMC,GAAG,WAAlE,gB,GAjFErC,aAgGhB0D,GAAoB,CAAC7H,aAAYoM,YftEZ,SAACH,GAAD,OAAc,SAAChM,GACtCA,EAAS,CAACxB,KDxDc,iBCyDxB2B,IAAMkE,KAAK,cAAc2H,GACpBvL,MAAM,WACHT,EAASO,QAEZM,OAAM,SAAAC,GAAG,OAAIH,QAAQ6C,MAAM1C,SeyErBqD,gBAbS,SAAC7F,GAAD,MAAY,CAChCD,KAAMC,EAAMD,QAYwBuJ,GAAzBzD,CAA4CI,KA7G5C,SAACC,GAAD,O,2WAAA,IACRA,KA4GoDD,CAAmBsH,K,+NC/H9E,IAkEetH,QAlEA,SAAAC,GAAK,O,2WAAA,IACbA,EADa,CAEhB+F,KAAM,CACFG,QAAU,OACVC,aAAe,IAGnBsC,YAAa,CACT1B,MAAO,OACP2B,cAAe,SACf9C,QAAU,IAEd+C,MAAO,CACHvC,SAAU,IACVjC,UAAW,SAEfhK,OAAQ,CACJ4M,MAAO,GACP7C,OAAQ,GACRyC,gBAAiB3G,EAAM4G,QAAQC,QAAQC,KACvCX,aAAc,GAElByC,KAAM,CACF7B,MAAO,IACP7C,OAAQ,GACRyC,gBAAiB,mBACjBR,aAAc,IAElBa,SAAU,CACND,MAAO,IACP7C,OAAQ,GACRyC,gBAAiB,mBACjBR,aAAc,IAElBc,SAAU,CACNF,MAAO,MACP7C,OAAQ,GACRiC,aAAc,GACdQ,gBAAiB,wBA4BV5G,EAvBQ,SAACrC,GAAW,IACxBW,EAAWX,EAAXW,QAED4H,EAAU4C,MAAMC,KAAK,CAAE7H,OAAQ,IAAIP,KAAI,SAAC+C,EAAM9I,GAAP,OACzC,kBAAC,KAAD,CAAMsC,UAAWoB,EAAQ0H,KAAMnE,IAAKjH,GAChC,kBAAC,KAAD,CAAWsC,UAAWoB,EAAQsK,MAAO3C,MAAOoB,OAC5C,kBAAC,KAAD,CAAanK,UAAWoB,EAAQ0K,aAC5B,yBAAK9L,UAAWoB,EAAQlE,SACxB,yBAAK8C,UAAWoB,EAAQuK,OACxB,yBAAK3L,UAAWoB,EAAQ2I,WACxB,yBAAK/J,UAAWoB,EAAQ2I,WACxB,yBAAK/J,UAAWoB,EAAQ4I,gBAKpC,OAAO,kBAAC,WAAD,KAAWhB,MC1DT+C,GAAb,4LAGQ5K,KAAKV,MAAMuL,eAHnB,+BASc,IAAD,EACuB7K,KAAKV,MAAMhD,KAA/BpB,EADH,EACGA,QAEJ4P,EAHC,EACYhQ,QAKhB,kBAAC,GAAD,MAFGI,EAAQoH,KAAI,SAACnH,GAAD,OAAY,kBAAC,GAAD,CAAQqI,IAAKrI,EAAOa,SAAUb,OAAQA,OAIlE,OACI,kBAAC,KAAD,CAAM+J,WAAS,EAACkC,QAAS,IACrB,kBAAC,KAAD,CAAM/B,MAAI,EAACC,GAAI,EAAGyF,GAAI,IACjBD,GAEL,kBAAC,KAAD,CAAMzF,MAAI,EAACC,GAAI,EAAGyF,GAAI,IAClB,kBAAC,GAAD,YAvBpB,GAA0BzJ,aAyCXC,gBAJS,SAAA7F,GAAK,MAAK,CAC9BY,KAAMZ,EAAMY,QAGwB,CAACuO,WfpCf,kBAAM,SAAAzN,GAC9BA,EAAS,CAAExB,KHPe,iBGQ1B2B,IACGK,IAAI,YACJC,MAAK,SAAAC,GACJC,QAAQC,IAAI,kBAAmBF,EAAIxB,MACnCc,EAAS,CACPxB,KHToB,cGUpBC,QAASiC,EAAIxB,UAGhB2B,OAAM,SAAAC,GACLd,EAAS,CACPxB,KHfoB,cGgBpBC,QAAS,WesBF0F,CAAuCqJ,I,mPCnCtD,IAIaI,GAAb,YACI,aAAe,IAAD,8BACV,+CAaJzL,aAAe,SAACC,GACZ,EAAKJ,SAAL,eACKI,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAhB5B,EAmBdC,aAAe,SAACJ,GACZA,EAAMK,iBAEN,IAAMoL,EAAW,CACfC,MAAO,EAAKxP,MAAMwP,MAClBC,SAAU,EAAKzP,MAAMyP,UAEvB,EAAK7L,MAAM8L,UAAUH,EAAU,EAAK3L,MAAMqH,UAxB1C,EAAKjL,MAAQ,CACTwP,MAAO,GACPC,SAAU,GACV/P,OAAS,IALH,EADlB,uFAU8B2E,GACrBA,EAAUnD,GAAGxB,QACd4E,KAAKZ,SAAS,CAAEhE,OAAQ2E,EAAUnD,GAAGxB,WAZ7C,+BA+Bc,IAAD,EAC8B4E,KAAKV,MAAhCW,EADH,EACGA,QAAcnF,EADjB,EACY8B,GAAK9B,QACfM,EAAU4E,KAAKtE,MAAfN,OACP,OACI,kBAAC,KAAD,CAAM8J,WAAS,EAACrG,UAAWoB,EAAQoL,MAC/B,kBAAC,KAAD,CAAMhG,MAAI,EAACC,IAAE,IACb,kBAAC,KAAD,CAAMD,MAAI,EAACC,IAAE,GACT,yBAAKC,IAAK+F,KAAS9F,IAAI,UAAU3G,UAAWoB,EAAQ2H,QACpD,kBAAC,KAAD,CAAY5G,QAAQ,KAAKnC,UAAWoB,EAAQsL,WAA5C,SAGA,0BAAMC,YAAU,EAACjL,SAAUP,KAAKJ,cACnC,kBAAC,IAAD,CACCmK,GAAG,QACHrK,KAAK,QACL9D,KAAK,QACL4E,MAAM,QACN3B,UAAWoB,EAAQwL,UACnB5K,WAAYzF,EAAO8P,MACnBtK,QAAOxF,EAAO8P,MACdvL,MAAOK,KAAKtE,MAAMwP,MAClBnK,SAAUf,KAAKT,aACfa,WAAS,IAET,kBAAC,IAAD,CACE2J,GAAG,WACHrK,KAAK,WACL9D,KAAK,WACL4E,MAAM,WACN3B,UAAWoB,EAAQwL,UACnB5K,WAAYzF,EAAO+P,SACnBvK,QAAOxF,EAAO+P,SACdxL,MAAOK,KAAKtE,MAAMyP,SAClBpK,SAAUf,KAAKT,aACfa,WAAS,IAEThF,EAAOsQ,SACN,kBAAC,KAAD,CAAY1K,QAAQ,QAAQnC,UAAWoB,EAAQ0L,aAC5CvQ,EAAOsQ,SAGZ,kBAAC,IAAD,CAAQ9P,KAAK,SAASoF,QAAQ,YAAYC,MAAM,UAAUpC,UAAWoB,EAAQoG,OAAQlF,SAAUrG,GAA/F,QAEGA,GACC,kBAAC,KAAD,CAAkBsG,KAAM,GAAIvC,UAAWoB,EAAQ2L,YAGnD,6BACA,iEAAsC,kBAAC,IAAD,CAAMjI,GAAG,WAAT,WAGzC,kBAAC,KAAD,CAAM0B,MAAI,EAACC,IAAE,SAlF7B,GAA2BhE,aAoGrB0D,GAAoB,CACxBoG,UlBxHuB,SAACH,EAAUtE,GAAX,OAAsB,SAACvJ,GAC5CA,EAAS,CAAExB,KDKW,eCJtB2B,IAAMkE,KAAK,SAAUwJ,GAChBpN,MAAK,SAAAC,GACJK,EAAuBL,EAAIxB,KAAK8B,OAChChB,EAASO,KACTP,EAAS,CAAExB,KDCO,iBCAlB+K,EAAQkF,KAAK,QAEd5N,OAAM,SAAAC,GACHd,EAAS,CACLxB,KDNU,aCOVC,QAASqC,EAAIwD,SAASpF,akB+GvBiF,gBATS,SAAC7F,GAAD,MAAY,CAClCD,KAAOC,EAAMD,KACbmB,GAAKlB,EAAMkB,MAO2BoI,GAAzBzD,CAA4CI,KA5G5C,SAACC,GAAD,O,2WAAA,IACVA,KA2GsDD,CAAmBqJ,K,+NC5G9E,IAMac,GAAb,YACI,aAAe,IAAD,8BACV,+CASJvM,aAAe,SAACC,GACZ,EAAKJ,SAAL,eACKI,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAZ5B,EAsBdC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKT,SAAS,CACZtE,SAAS,IAEX,IAAMiR,EAAc,CAClBb,MAAO,EAAKxP,MAAMwP,MAClBC,SAAU,EAAKzP,MAAMyP,SACrBa,gBAAiB,EAAKtQ,MAAMsQ,gBAC5BjQ,OAAQ,EAAKL,MAAMK,QAErB,EAAKuD,MAAM2M,WAAWF,EAAa,EAAKzM,MAAMqH,UA/B9C,EAAKjL,MAAQ,CACTwP,MAAO,GACPC,SAAU,GACVa,gBAAiB,GACjBjQ,OAAQ,GACRX,OAAS,IAPH,EADlB,uFAiB8B2E,GACrBA,EAAUnD,GAAGxB,QACd4E,KAAKZ,SAAS,CAAEhE,OAAQ2E,EAAUnD,GAAGxB,WAnB7C,+BAqCc,IAAD,EAC8B4E,KAAKV,MAAhCW,EADH,EACGA,QAAcnF,EADjB,EACY8B,GAAK9B,QACfM,EAAU4E,KAAKtE,MAAfN,OACP,OACI,kBAAC,KAAD,CAAM8J,WAAS,EAACrG,UAAWoB,EAAQoL,MAC/B,kBAAC,KAAD,CAAMhG,MAAI,EAACC,IAAE,IACb,kBAAC,KAAD,CAAMD,MAAI,EAACC,IAAE,GACT,yBAAKC,IAAK+F,KAAS9F,IAAI,UAAU3G,UAAWoB,EAAQ2H,QACpD,kBAAC,KAAD,CAAY5G,QAAQ,KAAKnC,UAAWoB,EAAQsL,WAA5C,UAGA,0BAAMC,YAAU,EAACjL,SAAUP,KAAKJ,cACnC,kBAAC,IAAD,CAAWmK,GAAG,QAAQrK,KAAK,QAAQ9D,KAAK,QAAQ4E,MAAM,QAAQ3B,UAAWoB,EAAQwL,UAAW5K,WAAYzF,EAAO8P,MAAOtK,QAAOxF,EAAO8P,MACnIvL,MAAOK,KAAKtE,MAAMwP,MAAOnK,SAAUf,KAAKT,aAAca,WAAS,IAC/D,kBAAC,IAAD,CAAW2J,GAAG,WAAWrK,KAAK,WAAW9D,KAAK,WAAW4E,MAAM,WAAW3B,UAAWoB,EAAQwL,UAAW5K,WAAYzF,EAAO+P,SAAUvK,QAAOxF,EAAO+P,SAClJxL,MAAOK,KAAKtE,MAAMyP,SAAUpK,SAAUf,KAAKT,aAAca,WAAS,IAClE,kBAAC,IAAD,CAAW2J,GAAG,kBAAkBrK,KAAK,kBAAkB9D,KAAK,WAAW4E,MAAM,mBAAmB3B,UAAWoB,EAAQwL,UAAW5K,WAAYzF,EAAO4Q,gBAAiBpL,QAAOxF,EAAO+P,SAChLxL,MAAOK,KAAKtE,MAAMsQ,gBAAiBjL,SAAUf,KAAKT,aAAca,WAAS,IACzE,kBAAC,IAAD,CAAW2J,GAAG,SAASrK,KAAK,SAAS9D,KAAK,OAAO4E,MAAM,SAAS3B,UAAWoB,EAAQwL,UAAW5K,WAAYzF,EAAOW,OAAQ6E,QAAOxF,EAAOW,OACvI4D,MAAOK,KAAKtE,MAAMK,OAAQgF,SAAUf,KAAKT,aAAca,WAAS,IAC/DhF,EAAOsQ,SACN,kBAAC,KAAD,CAAY1K,QAAQ,QAAQnC,UAAWoB,EAAQ0L,aAC5CvQ,EAAOsQ,SAGZ,kBAAC,IAAD,CAAQ9P,KAAK,SAASoF,QAAQ,YAAYC,MAAM,UAAUpC,UAAWoB,EAAQoG,OAAQlF,SAAUrG,GAA/F,SAEGA,GACC,kBAAC,KAAD,CAAkBsG,KAAM,GAAIvC,UAAWoB,EAAQ2L,YAGnD,6BACA,kEAAuC,kBAAC,IAAD,CAAMjI,GAAG,WAAT,WAG1C,kBAAC,KAAD,CAAM0B,MAAI,EAACC,IAAE,SAxE7B,GAA4BhE,aA4FbC,gBAPQ,SAAC7F,GAAD,MAAY,CACjCD,KAAMC,EAAMD,KACZmB,GAAIlB,EAAMkB,MAK4B,CAACqP,WnBhGf,SAACF,EAAapF,GAAd,OAAyB,SAACvJ,GAChDA,EAAS,CAAExB,KDZW,eCatB2B,IAAMkE,KAAK,UAAWsK,GACjBlO,MAAK,SAAAC,GACNK,EAAuBL,EAAIxB,KAAK8B,OAC9BhB,EAASO,KACTP,EAAS,CAAExB,KDhBO,iBCiBlB+K,EAAQkF,KAAK,QAEd5N,OAAM,SAAAC,GACHd,EAAS,CACLxB,KDvBU,aCwBVC,QAASqC,EAAIwD,SAASpF,amBoFvBiF,CAAyCI,KAlGzC,SAACC,GAAD,O,2WAAA,IACRA,KAiGiDD,CAAmBmK,K,+NCpG3E,IAiDiBnK,QAjDF,SAACC,GAAD,O,2WAAA,IACVA,KAgDYD,EA7CO,SAACrC,GAAW,IACxBW,EAA2EX,EAA3EW,QADuB,EACoDX,EAAlEyJ,QAAUhN,EADI,EACJA,OAAQmH,EADJ,EACIA,UAAW2G,EADf,EACeA,SAAU3B,EADzB,EACyBA,IAAKC,EAD9B,EAC8BA,QAAS1B,EADvC,EACuCA,SAEtE,OACI,kBAAC,KAAD,CAAO5H,UAAWoB,EAAQ6J,OAClB,yBAAKjL,UAAWoB,EAAQ8I,SACpB,yBAAKlK,UAAU,iBACX,yBAAKA,UAAU,gBAAgB0G,IAAKsE,EAAUrE,IAAI,aAEtD,6BACA,yBAAK3G,UAAU,mBACX,kBAAC,KAAD,CAAS4E,UAAWC,IAAMC,GAAE,iBAAY5H,GAAUkF,MAAM,UAAUD,QAAQ,MAA1E,IACMjF,GAEN,6BACCmM,GAAO,kBAAC,KAAD,CAAYlH,QAAQ,SAASkH,GACrC,6BACCzB,GACG,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAYxF,MAAM,YADtB,IACmC,8BAAOwF,GAC1C,8BAGH0B,GACG,kBAAC,WAAD,KACI,kBAAC,KAAD,CAAUlH,MAAM,YAChB,uBAAGgJ,KAAM9B,EAAS1I,OAAO,SAASyK,IAAI,uBACjC,IAAK/B,GAEV,8BAGR,kBAAC,KAAD,CAAelH,MAAM,YAtBzB,IAsBuC,IACnC,wCAAcyB,KAAMQ,GAAWyC,OAAO,mBCzCjDlK,GAAb,2MACEC,MAAQ,CACNqN,QAAS,KACTmD,cAAe,MAHnB,mFAKuB,IAAD,OAEZnQ,EAASiE,KAAKV,MAAM6M,MAAMC,OAAOrQ,OACjCC,EAAWgE,KAAKV,MAAM6M,MAAMC,OAAOpQ,SAErCA,GACFgE,KAAKZ,SAAS,CACZ8M,cAAelQ,IAInBgE,KAAKV,MAAM3B,YAAY5B,GACvBwB,IACGK,IADH,gBACgB7B,IACb8B,MAAK,SAAAC,GACJ,EAAKsB,SAAS,CACZ2J,QAASjL,EAAIxB,KAAKb,UAGrBwC,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QAxBhC,+BA0BY,IAAD,EACsB8B,KAAKV,MAAMhD,KAAhCpB,EADD,EACCA,QAASJ,EADV,EACUA,QAEToR,EAAkBlM,KAAKtE,MAAvBwQ,cAEFG,EAAgBvR,EACpB,kBAAC,GAAD,MACc,OAAZI,EACF,uDACGgR,EAGHhR,EAAQoH,KAAI,SAAAnH,GACV,OAAIA,EAAOa,WAAakQ,EACf,kBAAC,GAAD,CAAQ1I,IAAKrI,EAAOa,SAAUb,OAAQA,IACnC,kBAAC,GAAD,CAAQqI,IAAKrI,EAAOa,SAAUb,OAAQA,EAAQ2L,YAAU,OALtE5L,EAAQoH,KAAI,SAAAnH,GAAM,OAAI,kBAAC,GAAD,CAAQqI,IAAKrI,EAAOa,SAAUb,OAAQA,OAS9D,OACE,kBAAC,KAAD,CAAM+J,WAAS,EAACkC,QAAS,IACvB,kBAAC,KAAD,CAAM/B,MAAI,EAACC,GAAI,EAAGyF,GAAI,IACnBsB,GAEH,kBAAC,KAAD,CAAMhH,MAAI,EAACC,GAAI,EAAGyF,GAAI,IACI,OAAvB/K,KAAKtE,MAAMqN,QACV,kBAAC,GAAD,MAEA,kBAAC,GAAD,CAAeA,QAAS/I,KAAKtE,MAAMqN,gBAtD/C,GAA0BzH,aAuEXC,gBAJS,SAAA7F,GAAK,MAAK,CAChCY,KAAMZ,EAAMY,QAG0B,CAAEqB,YnBkDf,SAAA7B,GAAU,OAAI,SAAAsB,GACvCA,EAAS,CAAExB,KH3He,iBG4H1B2B,IACGK,IADH,gBACgB9B,IACb+B,MAAK,SAAAC,GACJC,QAAQC,IAAI,YAAaF,EAAIxB,MAC7Bc,EAAS,CACPxB,KH7HoB,cG8HpBC,QAASiC,EAAIxB,KAAKpB,aAGrB+C,OAAM,WACLb,EAAS,CACPxB,KHnIoB,cGoIpBC,QAAS,amBhEF0F,CAA0C9F,IC3DnDmG,GAAQ0K,ICvBC,CACX9D,QAAU,CACRC,QAAS,CACP8D,MAAQ,UACR7D,KAAO,UACP8D,KAAO,UACPC,aAAe,QAEjBC,UAAY,CACVH,MAAQ,UACR7D,KAAO,UACP8D,KAAO,UACPC,aAAe,SAGnBE,WAAY,CACVC,iBAAkB,GAEpBvB,KAAO,CACLjF,UAAW,UAEfwB,MAAO,CACHH,OAAQ,YACRkB,MAAO,IACP7C,OAAQ,KAEZyF,UAAY,CACV9D,OAAQ,aAEVgE,UAAW,CACThE,OAAQ,aAEVpB,OAAQ,CACNtE,UAAY,GACZF,SAAU,YAEZ8J,YAAa,CACX1K,MAAO,MACP4L,SAAU,UAGZjB,SAAU,CACR/J,SAAU,YAGZ+D,mBAAoB,CAClBkH,OAAQ,OACRrF,OAAQ,GAEV5B,iBAAmB,CACjB8C,MAAO,OACPoE,aAAc,2BACdhF,aAAc,IAGde,MAAO,CACPtB,QAAS,IAsCX4C,QAAS,CACPhE,UAAW,SACX,MAAO,CACLqB,OAAQ,cAGZsB,QAAS,CACP,mBAAoB,CAClB3C,UAAW,SACXvE,SAAU,YAEZ,mBAAoB,CAClB8G,MAAO,IACP7C,OAAQ,IACRC,UAAW,QACX1F,SAAU,OACV2F,aAAc,OAEhB,qBAAsB,CACpBI,UAAW,SACX,cAAe,CACb4G,cAAe,UAEjB,MAAO,CACL/L,MAAO,YAGX,OAAQ,CACN6L,OAAQ,OACRrF,OAAQ,iBDlGdlK,IAAMC,SAASyP,QAAU,6DAEzB,IAAM7O,GAAQf,aAAagB,UACvBD,KAEoB,IADF8O,IAAU9O,IACd+O,IAAaC,KAAKC,OAChCpQ,OAAOwJ,SAASwD,KAAO,SACvBpN,EAAMO,SAASD,OAEfN,EAAMO,SAAS,CAAExB,KvBlCY,sBuBmC7B2B,IAAMC,SAASC,QAAQC,OAAvB,cAAiDU,GACjDvB,EAAMO,SAASO,O,IA+BJ2P,G,iLAzBX,OACE,kBAAC,IAAD,CAAiB1L,MAAOA,IACtB,kBAAC,IAAD,CAAU/E,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKgC,UAAU,aACb,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0O,OAAK,EAACC,KAAK,IAAI/J,UAAWmH,KACjC,kBAAC,GAAD,CAAW2C,OAAK,EAACC,KAAK,SAAS/J,UAAWuH,KAC1C,kBAAC,GAAD,CAAWuC,OAAK,EAACC,KAAK,UAAU/J,UAAWqI,KAC3C,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,iBAAiB/J,UAAWhI,KAC9C,kBAAC,IAAD,CACE8R,OAAK,EACLC,KAAK,kCACL/J,UAAWhI,c,GAhBX6F,aE7BE2C,QACW,cAA7BhH,OAAOwJ,SAASgH,UAEe,UAA7BxQ,OAAOwJ,SAASgH,UAEhBxQ,OAAOwJ,SAASgH,SAAStB,MACvB,2DCbNuB,IAASpJ,OAAO,kBAAC,GAAD,MAASmF,SAASC,eAAe,SD4H3C,kBAAmBiE,WACrBA,UAAUC,cAAcC,MAAMhQ,MAAK,SAAAiQ,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.639662d8.chunk.js","sourcesContent":["import { SET_USER, SET_AUTHENTICATED, SET_UNSET_AUTHENTICATED, LOADING_USER, LIKE_SCREAM, UNLIKE_SCREAM, MARK_NOTIFICATIONS_READ } from '../types'\n\nconst initialState = {\n    authenticated: false,\n    loading: false,\n    credentials: {},\n    likes: [],\n    notifications: []\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SET_AUTHENTICATED:\n            return {\n                ...state,\n                authenticated: true\n            };\n        case SET_UNSET_AUTHENTICATED:\n            return initialState;\n        case SET_USER:\n            return {\n                authenticated: true,\n                loading: false,\n                ...action.payload\n            };\n        case LOADING_USER:\n            return {\n                ...state,\n                loading: true\n            }\n        case LIKE_SCREAM:\n            return {\n                ...state,\n                likes: [\n                    ...state.likes,\n                    {\n                        userHandle: state.credentials.handle,\n                        screamId: action.payload.screamId\n                    }\n                ]\n            }\n        case UNLIKE_SCREAM: \n            return {\n                ...state,\n                likes: state.likes.filter(like => like.screamId !== action.payload.screamId)\n            };\n        case MARK_NOTIFICATIONS_READ:\n            state.notifications.forEach((not) => (not.read = true));\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n}","import { SET_SCREAMS, LIKE_SCREAM, UNLIKE_SCREAM, LOADING_DATA, DELETE_SCREAM, POST_SCREAM, SET_SCREAM, SUBMIT_COMMENT } from '../types'\n\nconst initialState = {\n    screams: [],\n    scream: {},\n    loading: false,\n\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case LOADING_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case SET_SCREAMS:\n            return {\n                ...state,\n                screams: action.payload,\n                loading: false\n            }\n        case SET_SCREAM:\n            return {\n                ...state,\n                scream: action.payload\n            }\n        case LIKE_SCREAM:\n        case UNLIKE_SCREAM:\n            let index = state.screams.findIndex((scream) => scream.screamId === action.payload.screamId);\n            state.screams[index] = action.payload;\n            // 다른 곳에서도 코멘트 카운트를 업데이트하기위함.\n            if(state.scream.screamId === action.payload.screamId) {\n                state.scream = action.payload\n            }\n            return {\n                ...state,\n\n            }\n        case DELETE_SCREAM: \n            //이부분 초기화 때문에 index2를 사용함\n            let index2 = state.screams.findIndex(scream => scream.screamId === action.payload);\n            state.screams.splice(index2, 1);\n            return {\n                ...state\n            }\n        case POST_SCREAM:\n            return {\n                ...state,\n                screams: [\n                    action.payload,\n                    ...state.screams\n                ]\n            }\n        case SUBMIT_COMMENT:\n            return {\n                ...state,\n                scream: {\n                    ...state.scream,\n                    comments: [action.payload, ...state.scream.comments]\n                }\n            }\n        default: \n        return state;\n\n    }\n}","import { SET_ERRORS, CLEAR_ERRORS, LOADING_UI, STOP_LOADING_UI} from '../types';\n\nconst initialState = {\n    loading: false,\n    errors: null\n};\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        case SET_ERRORS:\n            return {\n                ...state,\n                loading: false,\n                errors: action.payload\n            };\n        case CLEAR_ERRORS:\n            return {\n                ...state,\n                loading: false,\n                errors: null\n            };\n        case LOADING_UI:\n            return {\n                ...state,\n                loading:true,\n            }\n        case STOP_LOADING_UI:\n            return {\n                ...state,\n                loading: false\n            }\n        default: \n        return state;\n    }\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';//리덕스에서 사용할 것들. \n/*\n    createStore = 말 그대로 스토어를 만드는 것.\n    combineReducers = 많은 리듀서를 하나로 묶어서 사용하는것.\n    applyMiddleware = \n    compose =  깊이 중첩된 함수 변환을 길게 늘어진 코드 없이 작성하게 해주는 것\n*/\nimport thunk from 'redux-thunk';\n\nimport userReducer from './reducers/userReducer';\nimport dataReducer from './reducers/dataReducer';\nimport uiReducer from './reducers/uiReducer';\n\n//기본 스테이트값\nconst initialState = {};\n\n//미들웨어 thunk\nconst middleware = [thunk];\n\n//리듀서 묶어서 편하게 사용하기.\nconst reducers = combineReducers({\n    user: userReducer,\n    data: dataReducer,\n    UI: uiReducer\n});\n\n//create 스토어, window.___REDUX... 는 크롬에 리덕스 앱을 사용하기 위함.\nconst store = createStore(reducers, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))\n\nexport default store;","//User reducer types\nexport const SET_AUTHENTICATED = 'SET_AUTHENTICATED';\nexport const SET_UNSET_AUTHENTICATED = 'SET_UNSET_AUTHENTICATED';\nexport const SET_USER = 'SET_USER';\nexport const LOADING_USER = 'LOADING_USER';\nexport const MARK_NOTIFICATIONS_READ = 'MARK_NOTIFICATIONS_READ';\n\n//UI reducer types\nexport const SET_ERRORS = 'SET_ERRORS';\nexport const LOADING_UI = 'LOADING_UI';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\nexport const LOADING_DATA = 'LOADING_DATA'\nexport const STOP_LOADING_UI = 'STOP_LOADING_UI';\n\n//Data reducer types\nexport const SET_SCREAMS =  'SET_SCREAMS';\nexport const SET_SCREAM = 'SET_SCREAM';\nexport const LIKE_SCREAM = 'LIKE_SCREAM'\nexport const UNLIKE_SCREAM  = 'UNLIKE_SCREAM'\nexport const DELETE_SCREAM = 'DELETE_SCREAM'\nexport const POST_SCREAM = 'POST_SCREAM'\nexport const SUBMIT_COMMENT = 'SUBMIT_COMMENT'","import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNSET_AUTHENTICATED, LOADING_USER, MARK_NOTIFICATIONS_READ } from '../types'\nimport axios from 'axios'\n\nexport const loginUser = (userData, history) =>(dispatch) => {\n    dispatch({ type: LOADING_UI });//call reduce\n    axios.post('/login', userData)\n        .then(res => {\n          setAuthorizationHeader(res.data.token)\n          dispatch(getUserData());\n          dispatch({ type: CLEAR_ERRORS  });//call reduce\n          history.push('/');\n        })\n        .catch(err=>{\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\nexport const signupUser = (newUserData, history) =>(dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/signup', newUserData)\n        .then(res => {\n        setAuthorizationHeader(res.data.token)\n          dispatch(getUserData());\n          dispatch({ type: CLEAR_ERRORS  });\n          history.push('/');\n        })\n        .catch(err=>{\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\nexport const logoutUser = () => (dispatch) => {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({ type: SET_UNSET_AUTHENTICATED });\n}\n\n\nexport const getUserData = () => (dispatch) => {\n    dispatch({ type: LOADING_USER});\n    axios\n        .get('/user')\n        .then(res=> {\n            console.log(\"user-DATA\",res.data)\n            // dispatch({ payload: res.data})\n            dispatch({\n                type: SET_USER,\n                payload: res.data\n            })\n        })\n        .catch(err => console.log(err))\n}\n\nexport const uploadImage = (formData) => (dispatch) =>{\n    dispatch({type: LOADING_USER})\n    axios.post('/user/image',formData)\n        .then (() =>{\n            dispatch(getUserData());\n        })\n        .catch(err => console.error(err))\n}\n\nexport const editUserDetails = (userDetails) => (dispatch) => {\n    dispatch({ type : LOADING_USER });\n    axios.post('/user', userDetails)\n        \n        .then(() => {\n            console.log('USER-DETAILS - ', userDetails)\n            dispatch(getUserData());\n        })\n        .catch(err => console.log(err))\n}\n\nexport const markNotificationsRead = (notificationIds) => dispatch => {\n    axios.post('/notifications', notificationIds)\n    .then(res => {\n        dispatch({\n            type: MARK_NOTIFICATIONS_READ\n        })\n    })\n    .catch(err => console.log(err));\n}\n\n\nconst setAuthorizationHeader = (token) => {\n    const FBIdToken = `Bearer ${token}`\n          localStorage.setItem('FBIdToken', FBIdToken);\n          axios.defaults.headers.common['Authorization'] = FBIdToken\n}","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport IconButton from '@material-ui/core/IconButton'\n\nexport default ({ children, onClick, tip,  btnClassName, tipClassName }) => (\n    <Tooltip title={tip} className={tipClassName} placement=\"top\">\n        <IconButton onClick={onClick} className={btnClassName}>\n            {children}\n        </IconButton>\n    </Tooltip>\n)\n","import {\n  SET_SCREAMS,\n  LOADING_DATA,\n  LIKE_SCREAM,\n  UNLIKE_SCREAM,\n  DELETE_SCREAM,\n  SET_ERRORS,\n  CLEAR_ERRORS,\n  POST_SCREAM,\n  LOADING_UI,\n  SET_SCREAM,\n  STOP_LOADING_UI,\n  SUBMIT_COMMENT\n} from \"../types\";\nimport axios from \"axios\";\n\n//Get all Screams\nexport const getScreams = () => dispatch => {\n  dispatch({ type: LOADING_DATA });\n  axios\n    .get(\"/screams\")\n    .then(res => {\n      console.log(\"getScreamData =\", res.data);\n      dispatch({\n        type: SET_SCREAMS,\n        payload: res.data\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_SCREAMS,\n        payload: []\n      });\n    });\n};\n\nexport const getScream = screamId => dispatch => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .get(`/scream/${screamId}`)\n    .then(res => {\n      dispatch({\n        type: SET_SCREAM,\n        payload: res.data\n      });\n      dispatch({\n        type: STOP_LOADING_UI\n      });\n    })\n    .catch(err => console.log(err));\n};\n\n//Post a scream\nexport const postScream = newScream => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios\n    .post(\"/scream\", newScream)\n    .then(res => {\n      dispatch({\n        type: POST_SCREAM,\n        payload: res.data\n      });\n      dispatch(clearErrors());\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n//Like a scream\nexport const likeScream = screamId => dispatch => {\n  axios\n    .get(`/scream/${screamId}/like`)\n    .then(res => {\n      dispatch({\n        type: LIKE_SCREAM,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\n//Unlike a scream\n\nexport const unlikeScream = screamId => dispatch => {\n  axios\n    .get(`/scream/${screamId}/unlike`)\n    .then(res => {\n      dispatch({\n        type: UNLIKE_SCREAM,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\n//submit a comment\nexport const submitComment = (screamId, commentData) => dispatch => {\n  axios\n    .post(`/scream/${screamId}/comment`, commentData)\n    .then(res => {\n      dispatch({\n        type: SUBMIT_COMMENT,\n        payload: res.data\n      });\n      dispatch(clearErrors());\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const deleteScream = screamId => dispatch => {\n  console.log(\"delete: \", screamId);\n  axios\n    .delete(`/scream/${screamId}`)\n    .then(() => {\n      dispatch({\n        type: DELETE_SCREAM,\n        payload: screamId\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const getUserData = userHandle => dispatch => {\n  dispatch({ type: LOADING_DATA });\n  axios\n    .get(`/user/${userHandle}`)\n    .then(res => {\n      console.log(\"asdasdasd\", res.data);\n      dispatch({\n        type: SET_SCREAMS,\n        payload: res.data.screams\n      });\n    })\n    .catch(() => {\n      dispatch({\n        type: SET_SCREAMS,\n        payload: null\n      });\n    });\n};\n\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport MyButton from '../../util/MyButton'\n\n//MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport AddIcon from '@material-ui/icons/Add'\nimport CloseIcon from '@material-ui/icons/Close'\n\n//redux stuff\nimport { connect } from 'react-redux'\nimport { postScream, clearErrors } from '../../redux/actions/dataActions'\n\nconst styles = theme => ({\n    ...theme,\n    submitButton : {\n        position: 'relative',\n        float: 'right',\n        marginTop: 10\n    },\n    progressSpinner: {\n        position: 'absolute'\n    },\n    closeButton : {\n        position: 'absolute',\n        left: '91%',\n        top: '6%'\n    }\n})\n\nclass PostScream extends Component {\n    state = {\n        open : false,\n        body: '',\n        errors: {}\n    };\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.UI.errors) {\n            this.setState({\n                errors:nextProps.UI.errors\n            })\n        };\n        if(!nextProps.UI.errors && !nextProps.UI.loading) {\n            this.setState({ \n                body: '',\n                open: false,\n                errors: {}\n            });\n        }\n    }\n    handleOpen =() =>{\n        this.setState({\n            open: true\n        })\n    }\n    handleClose =() =>{\n        this.props.clearErrors();\n        this.setState({\n            open: false,\n            errors: {}\n        })\n    }\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name] : event.target.value\n        })\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.postScream({ body : this.state.body})\n    }\n\n    render() {\n        const {errors} = this.state;\n        const {classes, UI:{ loading }} = this.props\n\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Post a Scream!\" >\n                    <AddIcon />\n                </MyButton>\n                <Dialog open={this.state.open} onClose ={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\n                        <CloseIcon />\n                    </MyButton>\n                    <DialogTitle>Post a new Scream</DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField\n                                name=\"body\"\n                                type=\"text\"\n                                label=\"SCREAM!\"\n                                multiline rows=\"3\"\n                                placeholder=\"Scream at your fallow apes\"\n                                error={errors.body ? true: false}\n                                helperText={errors.body}\n                                className={classes.TextField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.submitButton}\n                                disabled={loading}\n                                >\n                                Submit\n                                {loading && (\n                                    <CircularProgress size={30} className={classes.progressSpinner} />\n                                )}\n                            </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nPostScream.propTypes = {\n    postScream : PropTypes.func.isRequired,\n    clearErrors : PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state)=> ({\n    UI: state.UI\n})\n\nexport default connect(\n    mapStateToProps,\n    { postScream, clearErrors }\n)(withStyles(styles)(PostScream));","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\";\n//MUI Stuff\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport Badge from '@material-ui/core/Badge' \n\n//Icons\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat';\n\n//Redux\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../redux/actions/userActions'\nimport { Tooltip } from \"@material-ui/core\";\n\nclass Notifications extends Component {\n    state = {\n        anchorEl : null\n    };\n    handleOpen = (event) => {\n        this.setState({ anchorEl : event.target});\n    }\n    handleClose = () => {\n        this.setState({anchorEl:null});\n    }\n    onMenuOpened = () => {\n        let unreadNotificationsIds = this.props.notifications\n        .filter((not) => !not.read)\n        .map((not) => not.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsIds);\n    }\n    render() {\n        const notifications  = this.props.notifications ;\n        const anchorEl = this.state.anchorEl;\n\n        dayjs.extend(relativeTime);\n\n        let notificationsIcon;\n        if(notifications  && notifications.length > 0) {\n            notifications.filter(not => not.read === false).length > 0\n                ? notificationsIcon = (\n                    <Badge badgeContent={notifications.filter(not => not.read === false).length}\n                    color='secondary'>\n                        <NotificationsIcon />\n                    </Badge>\n                ) : (\n                    notificationsIcon = <NotificationsIcon />\n                )\n        }else {\n            notificationsIcon = <NotificationsIcon />\n        }\n        let notificationsMarkup = \n            notifications && notifications.length > 0 ? (\n                notifications.map(not => {\n                    const verb = not.type ==='like' ? 'liked' : 'commented on';\n                    const time = dayjs(not.createdAt).fromNow();\n                    const iconColor = not.read ? 'primary' : 'secondary';\n                    const icon = not.type === 'like' ? (\n                        <FavoriteIcon color={iconColor} style={{marginRight : 10}} />\n                    ): (\n                        <ChatIcon color={iconColor} style={{marginRight : 10}} />\n                    );\n\n                    return (\n                        <MenuItem key={not.createdAt} onClick={this.handleClose}>\n                            {icon}\n                            <Typography\n                                component={Link}\n                                color=\"default\"\n                                variant=\"body1\"\n                                to={`/users/${not.recipient}/scream/${not.screamId}`}\n                                >\n                                    {not.sender} {verb} your scream {time}\n                                </Typography>\n                        </MenuItem>\n                    )\n\n\n                })\n            ) : (\n                <MenuItem onClick = {this.handleClose}>\n                    You Have no notifications yet\n                </MenuItem>\n            )\n        return (\n            <Fragment>\n                <Tooltip placement=\"top\" title=\"Notifications\">\n                    <IconButton aria-owns={anchorEl ? 'simple-menu': undefined}\n                        aria-haspopup=\"true\"\n                        onClick={this.handleOpen}\n                        >\n                            {notificationsIcon}\n                        </IconButton>\n                </Tooltip>\n                <Menu\n                    anchorEl={anchorEl}\n                    open={Boolean(anchorEl)}\n                    onClose={this.handleClose}\n                    onEntered={this.onMenuOpened}\n                    >\n                        {notificationsMarkup}\n                    </Menu>\n            </Fragment>\n        )\n    }\n}\n\nNotifications.propTypes = {\n    markNotificationsRead : PropTypes.func.isRequired,\n    notifications: PropTypes.array.isRequired\n}\n\n\nconst mapStateToProps = state =>({\n    notifications: state.user.notifications\n})\n\nexport default connect(mapStateToProps, {markNotificationsRead})(Notifications)","import React, { Component, Fragment } from 'react';\nimport {Link} from 'react-router-dom';\nimport { connect } from 'react-redux' \nimport PropTypes from 'prop-types'\nimport MyButton from '../../util/MyButton'\nimport PostScream from '../scream/PostScream'\nimport Notifications from './Notifications'\n//MUI stuff\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\n\n//Icons\n// import AddIcon from '@material-ui/icons/Add'\nimport HomeIcon from '@material-ui/icons/Home'\n\nexport class Navbar extends Component {\n    render() {\n        const { authenticated  } = this.props\n        return (\n            <AppBar>\n                <Toolbar className=\"nav-container\">\n                    {/* authenticated 가 ture라면(로그인되어 인증이 되었을 경우) 아래 값이 리턴된다. */}\n                    {authenticated ? (\n                        <Fragment>\n                            <PostScream />\n                            <Link to=\"/\">\n                            <MyButton tip=\"Home\">\n                                <HomeIcon />\n                            </MyButton>\n                            </Link>\n                            \n                                <Notifications />\n                            \n                        </Fragment>\n                    ):(\n                        // authenticated 가 false라면(로그인되어 인증이 안되었을 경우) 아래 값이 리턴된다.\n                        <Fragment>\n                            <Button component={Link} to=\"/login\" color=\"inherit\">Login</Button>\n                            <Button component={Link} to=\"/\" color=\"inherit\">Home</Button>\n                            <Button component={Link} to=\"signup\" color=\"inherit\">Signup</Button>\n                        </Fragment>\n                            \n                    )}\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}\n\nNavbar.propTypes = {\n    authenticated : PropTypes.bool.isRequired\n}\n\nconst mapStateToProps = state => ({\n    authenticated : state.user.authenticated\n})\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom';\nimport{connect} from 'react-redux'\nimport PropTypes from 'prop-types';\n\nconst AuthRoute = ({component: Component, authenticated, ...rest}) => (\n    <Route\n        {...rest}\n            render={(props) =>\n                authenticated === true ? <Redirect to='/'/> : <Component {...props} />\n        }\n    />\n);\n\nconst mapStateToProps= (state) =>({\n    authenticated: state.user.authenticated\n})\n\nAuthRoute.propTypes = {\n    user: PropTypes.object\n}\n\nexport default connect(mapStateToProps)(AuthRoute)","import React, { Component, Fragment } from 'react'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport PropTypes from 'prop-types'\nimport MyButton from '../../util/MyButton'\n\n//MUI stuff\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\n\nimport { connect } from 'react-redux'\nimport { deleteScream } from '../../redux/actions/dataActions'\n\nconst styles = {\n    deleteButton : {\n        position : 'absolute',\n        left: '90%',\n        top: '10%'\n    }\n}\n\nclass DeleteScream extends Component {\n    state = {\n        open : false,\n\n    }\n    handleOpen = () => {\n        this.setState({\n            open: true\n        })\n    }\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n    deleteScream = () => {\n        this.props.deleteScream(this.props.screamId)\n        this.setState({\n            open: false\n        })\n    }\n    render() {\n        const { classes } = this.props\n        return (\n            <Fragment>\n                <MyButton tip=\"Delete Scream\"\n                    onClick={this.handleOpen}\n                    btnClassName={classes.deleteButton}\n                    >\n                        <DeleteOutline color=\"secondary\" />\n                    </MyButton>\n                    <Dialog\n                        open={this.state.open}\n                        onClose={this.handleClose}\n                        fullWidth\n                        maxWidth=\"sm\"\n                        >\n                            <DialogTitle>\n                                Are you sure you wantto delete this scream ??\n                            </DialogTitle>\n                            <DialogActions>\n                                <Button onClick={this.handleClose} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button onClick={this.deleteScream} color=\"secondary\">\n                                    Delete\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nDeleteScream.propTypes = {\n    deleteScream : PropTypes.func.isRequired,\n    classes : PropTypes.object.isRequired,\n    screamId : PropTypes.string.isRequired\n}\n\nexport default connect(null, {deleteScream})(withStyles(styles)(DeleteScream))","import React, { Component } from 'react'\nimport MyButton from '../../util/MyButton';\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n//Icons\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorder  from '@material-ui/icons/FavoriteBorder';\n//redux\nimport { connect } from 'react-redux'\nimport { likeScream, unlikeScream} from '../../redux/actions/dataActions'\n\n\nexport class LikeButton extends Component {\n    likedScream = () => {\n        if(this.props.user.likes && this.props.user.likes.find(like => like.screamId === this.props.screamId)) \n        return true;\n        else return false\n    }\n    likeScream = () => {\n        this.props.likeScream(this.props.screamId);\n    }\n    unlikeScream = () => {\n        this.props.unlikeScream(this.props.screamId);\n    };\n\n    render() {\n        const { authenticated } = this.props.user;\n\n        const likeButton = !authenticated ? (\n            <Link to=\"/login\">\n                <MyButton tip=\"Like\">\n                    <FavoriteBorder  color=\"primary\" />\n                </MyButton>\n            </Link>\n        ) : \n            this.likedScream() ?(\n                <MyButton tip=\"Undo like\" onClick={this.unlikeScream}>\n                    <FavoriteIcon color=\"primary\" />\n                </MyButton>\n            ) : (\n                <MyButton tip=\"like\" onClick={this.likeScream}>\n                    <FavoriteBorder  color=\"primary\" />\n                </MyButton>\n            )\n        \n        return likeButton\n    }\n}\n\nLikeButton.propTypes = {\n    user: PropTypes.object.isRequired,\n    screamId : PropTypes.string.isRequired,\n    likeScream: PropTypes.func.isRequired,\n    unlikeScream: PropTypes.func.isRequired\n} \n\nconst mapStateToProps = (state) => ({\n    user: state.user\n})\n\nconst mapActionsToProps = {\n    likeScream,\n    unlikeScream\n}\n\n\nexport default connect(mapStateToProps, mapActionsToProps) (LikeButton)\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport { Link } from 'react-router-dom'\nimport dayjs from 'dayjs'\n//MUI stuff\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n    ...theme,\n    commentImage: {\n        maxWidth: '100%',\n        height: 100,\n        objectFit: 'cover',\n        borderRadius: '50%'\n    },\n    commentData: {\n        marginLeft: 20\n    }\n})\n\n\nclass Comments extends Component {\n    render() {\n        const { comments, classes } = this.props;\n        return (\n            <Grid container >\n                {/* screamDialog에서 넘겨받은 props값(comment) index는 맨 마지막 코멘트에 border를 없애기 위함임 */}\n                {comments.map((comment, index)=> {\n                    const { body, createdAt, userImage, userHandle} = comment;\n                    //리턴값으로 아래 HTML을 내보냄.\n                    return (\n                        //해당 플래그먼트에 key값을 createat값으로 설정\n                        <Fragment key={createdAt}>\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    <Grid item sm={2}>\n                                        <img src={userImage} alt=\"comment\" className={classes.commentImage} />\n                                    </Grid>\n                                    <Grid item sm={9}>\n                                        <div className={classes.commentData}>\n                                            <Typography\n                                                variant=\"h5\"\n                                                component={Link}\n                                                to={`/users/${userHandle}`}\n                                                color=\"primary\"\n                                            >\n                                                {userHandle}\n                                            </Typography>\n                                            <Typography variant=\"body2\" color=\"textSecondary\" >\n                                                {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\n                                            </Typography>\n                                            <hr className={classes.invisibleSeparator} />\n                                            <Typography variant=\"body1\">{body}</Typography>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            {/* index가 comments의 길이에 -1값과 갖지 않다면 hr 안보임. */}\n                            {index !== comments.length -1 &&(\n                                <hr className={classes.visibleSeparator} />\n                            )}\n                        </Fragment>\n                    )\n                })}\n            </Grid>\n        )\n\n    }\n\n}\n\nComments.propTypes = {\n    comments: PropTypes.array.isRequired\n}\n\nexport default withStyles(styles)(Comments)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles'\n\n//MUI stuff\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\n\n//redux stuff\nimport {connect} from 'react-redux';\nimport {submitComment} from '../../redux/actions/dataActions'\n\nconst styles = theme => ({\n    ...theme\n})\n\nexport class CommentForm extends Component {\n    state= {\n        body: '',\n        errors: {}\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        //에러발생 후 다시 코멘트창 켯을때 남아있는 에러 없애기\n        if(nextProps.UI.errors) {\n            this.setState({\n                errors: nextProps.UI.errors\n            })\n        }\n        //코멘트가 작성되고 서브밋 버튼 클릭시 body초기화\n        if(!nextProps.UI.errors && !nextProps.UI.loading) {\n            this.setState({\n                body: ''\n            })\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]  : event.target.value\n        })\n    }\n    //screamId값, form 에서 받은 body값을 dataActions.js의 submitComment로 보냄.\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.submitComment(this.props.screamId, { body: this.state.body });\n    }\n\n    render() {\n        const { classes, authenticated} = this.props;\n        const errors = this.state.errors;\n        \n        //토큰 이 살아있다면, 코멘트 폼을 보여주라. 아니면 null 처리.\n        const commentFormMarkup = authenticated ? (\n            <Grid item sm={12} style={{ textAlign: 'center' }}>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField \n                        name=\"body\"\n                        type=\"text\"\n                        label=\"comment on scream\"\n                        error={errors.comment ? true : false}\n                        helperText={errors.comment}\n                        value={this.state.body}\n                        onChange={this.handleChange}\n                        fullWidth\n                        className={classes.TextField}\n                    />\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button} >\n                        Submit\n                    </Button>\n                </form>\n                <hr className={classes.visibleSeparator} />\n            </Grid>\n        ): null\n        return commentFormMarkup\n    }\n}\n\nCommentForm.propTypes = {\n    submitComment: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired,\n    screamId: PropTypes.string.isRequired,\n    authenticated: PropTypes.bool.isRequired\n\n}\n\nconst mapStateToProps = state => ({\n    UI: state.UI,\n    authenticated: state.user.authenticated\n})\n\nexport default connect(mapStateToProps, {submitComment}) (withStyles(styles)(CommentForm))\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport MyButton from \"../../util/MyButton\";\nimport LikeButton from \"./LikeButton\";\nimport Comments from \"./Comments\";\nimport dayjs from \"dayjs\";\nimport { Link } from \"react-router-dom\";\nimport CommentForm from \"./CommentForm\";\n//MUI Stuff\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n// import DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport UnfoldMore from \"@material-ui/icons/UnfoldMore\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\n\n//Redux stuff\nimport { connect } from \"react-redux\";\nimport { getScream, clearErrors } from \"../../redux/actions/dataActions\";\n\nconst styles = theme => ({\n  ...theme,\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: \"50%\",\n    objectFit: \"cover\"\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: \"absolute\",\n    left: \"90%\"\n  },\n  expendButton: {\n    position: \"absolute\",\n    left: \"90%\"\n  },\n  spinnerDiv: {\n    textAlign: \"center\",\n    margin: \"50px auto\"\n  }\n});\n\nclass ScreamDialog extends Component {\n  //해당 컴포넌트의 state값 정의\n  state = {\n    open: false,\n    oldPath: '',\n    newPath : ''\n  };\n  componentDidMount() {\n    if (this.props.openDialog) {\n      // console.log(\"작동하닝??\", this.props.openDialog);\n      // alert(`3333333333 : ${this.props.openDialog}`);\n      this.handleOpen();\n    }\n    // alert(`힝 : ${this.props.openDialog}`);\n  }\n  handleOpen = () => {\n    //현재의 pathUrl을 oldPath에 저장\n    let oldPath = window.location.pathname;\n    \n    //userHandle, screamId를 사용하겠다, 선언\n    const { userHandle, screamId } = this.props;\n    //newPath에 아래와 같이 저장.\n    const newPath = `/users/${userHandle}/scream/${screamId}`;\n\n    if(oldPath === newPath) oldPath = `/users/${userHandle}`;\n\n\n    //현재의 Url을 newPath로 지정\n    window.history.pushState(null, null, newPath);\n\n    //열기 state값 변경\n    this.setState({\n      open: true,\n      oldPath,\n      newPath\n    });\n    //dataActions.js 파일의 getScream에 클릭한 btn에 screamId값을 보내기.\n    this.props.getScream(this.props.screamId);\n  };\n  handleClose = () => {\n    //열린 Dialog를 닫았을 경우, 이전 Url로 변경\n    window.history.pushState(null, null, this.state.oldPath);\n    this.setState({\n      open: false\n    });\n    this.props.clearErrors();\n  };\n\n  render() {\n    //render되었을때 this.props를 생략할 수 있도록 미리 정의.\n    const {\n      classes,\n      scream: {\n        screamId,\n        body,\n        createdAt,\n        likeCount,\n        commentCount,\n        userImage,\n        userHandle,\n        comments\n      },\n      UI: { loading }\n    } = this.props;\n\n    //Dialog컴포넌트의 HTML을 DialogMarkup상수로 만들어 불러올 수 있도록 함.\n\n    const dialogMarkup = loading ? (\n      //만약 loading의 값이 true라면(loading 중) CircularProgress(loading spinner)를 가져와라.\n      <div className={classes.spinnerDiv}>\n        <CircularProgress size={200} thickness={2} />\n      </div>\n    ) : (\n      //loading값이 false(로딩 끝)라면, 아래 html을 불러옴.\n      <Grid container spacing={16}>\n        <Grid item sm={5}>\n          {/* img가 있다면 해당 유저의 img를 불러오고 없다면 no-img를 불러온다.*/}\n          <img\n            src={\n              userImage\n                ? userImage\n                : \"https://firebasestorage.googleapis.com/v0/b/socialape-32b84.appspot.com/o/no-img.png?alt=media\"\n            }\n            alt=\"Profile\"\n            className={classes.profileImage}\n          />\n        </Grid>\n        <Grid item sm={7}>\n          {/* 글씨를 불러옴 유저의 아이디. 그리고 Link를 이용해 해당 유저의 페이지로 이동할 수 있음. */}\n          <Typography\n            component={Link}\n            color=\"primary\"\n            variant=\"h5\"\n            to={`/user/${userHandle}`}\n          >\n            @{userHandle}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          {/* dayjs를 이용해 createAt값의 format을 변경해서 작성. */}\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {dayjs(createdAt).format(\"h:mm a, MMMM DD YYYY\")}\n          </Typography>\n          <hr className={classes.invisibleSeparator} />\n          {/* body값 나열. */}\n          <Typography variant=\"body1\">{body}</Typography>\n          <LikeButton screamId={screamId} />\n          <span>{likeCount} likes</span>\n          <MyButton tip=\"comments\">\n            <ChatIcon color=\"primary\" />\n          </MyButton>\n          <span>{commentCount} comments</span>\n        </Grid>\n\n        <hr className={classes.visibleSeparator} />\n        <CommentForm screamId={screamId} />\n        {/* 코멘트 컴포넌트 */}\n        <Comments comments={comments} />\n      </Grid>\n    );\n    return (\n      <Fragment>\n        {/* 하당 버튼을 삽입. //버튼 생성 */}\n        <MyButton\n          onClick={this.handleOpen}\n          tip=\"Expand scream\"\n          tipClassName={classes.expendButton}\n        >\n          {/* 이건 그냥 아이콘임. */}\n          <UnfoldMore color=\"primary\" />\n        </MyButton>\n        {/* 팝업 창 생성 */}\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          fullWidth\n          maxWidth=\"sm\"\n        >\n          <MyButton\n            tip=\"Close\"\n            onClick={this.handleClose}\n            tipClassName={classes.closeButton}\n          >\n            {/* 닫기버튼 */}\n            <CloseIcon />\n          </MyButton>\n          {/* 위에서 정의한 dialogMarkup 상수 삽입 */}\n          <DialogContent className={classes.dialogContent}>\n            {dialogMarkup}\n          </DialogContent>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nScreamDialog.propTypes = {\n  clearErrors: PropTypes.func.isRequired,\n  getScream: PropTypes.func.isRequired,\n  screamId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  scream: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  scream: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getScream,\n  clearErrors\n};\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(withStyles(styles)(ScreamDialog));\n","import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Link } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport PropTypes from \"prop-types\";\nimport MyButton from \"../../util/MyButton\";\nimport DeleteScream from \"./DeleteScream\";\nimport ScreamDialog from \"./ScreamDialog\";\nimport LikeButton from \"./LikeButton\";\n//MUI Stuff\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\n//Icons\nimport ChatIcon from \"@material-ui/icons/Chat\";\n\nimport { connect } from \"react-redux\";\n\nconst styles = {\n  card: {\n    position: \"relative\",\n    display: \"flex\",\n    marginBottom: 20\n  },\n  image: {\n    minWidth: 200\n  },\n  content: {\n    padding: 25,\n    objectFit: \"cover\"\n  }\n};\n\nexport class Scream extends Component {\n  render() {\n    dayjs.extend(relativeTime);\n    const {\n      classes,\n      scream: {\n        body,\n        createdAt,\n        userImage,\n        userHandle,\n        screamId,\n        likeCount,\n        commentCount\n      },\n      user: {\n        authenticated,\n        credentials: { handle }\n      }\n    } = this.props;\n    //const classes = this.props.classes\n\n    const deleteButton =\n      authenticated && userHandle === handle ? (\n        <DeleteScream screamId={screamId} />\n      ) : null;\n\n    return (\n      <Card className={classes.card}>\n        <CardMedia\n          // image=\"https://firebasestorage.googleapis.com/v0/b/socialape-32b84.appspot.com/o/no-img.png?alt=media\"\n          image={userImage}\n          title=\"Profile image\"\n          className={classes.image}\n        />\n\n        <CardContent className={classes.content}>\n          {/* 유저의 개인 페이지로 갈 수 있도록 함. */}\n          <Typography\n            variant=\"h5\"\n            component={Link}\n            to={`/users/${userHandle}`}\n            color=\"primary\"\n          >\n            {userHandle}\n          </Typography>\n          {deleteButton}\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {dayjs(createdAt).fromNow()}\n          </Typography>\n          <Typography variant=\"body1\">{body}</Typography>\n          <LikeButton screamId={screamId} />\n          <span>{likeCount} Likes</span>\n          <MyButton tip=\"comments\">\n            <ChatIcon color=\"primary\" />\n          </MyButton>\n          <span>{commentCount} comments</span>\n          <ScreamDialog\n            screamId={screamId}\n            userHandle={userHandle}\n            openDialog={this.props.openDialog}\n          />\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nScream.propTypes = {\n  user: PropTypes.object.isRequired,\n  scream: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  openDialog: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(Scream));\n","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport MyButton from '../../util/MyButton'\n\n//redux stuff\nimport { connect } from 'react-redux'\nimport { editUserDetails} from '../../redux/actions/userActions'\n\n//MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n//Icons\nimport EditIcon from '@material-ui/icons/Edit'\n\n\nconst styles = (theme) => ({\n    ...theme,\n    button : {\n        float: 'right'\n    }\n})\n\nclass EditDetails extends Component {\n    //이 컴포넌트에서 사용될 스테이트 명시\n    state = {\n        bio: '',\n        website : '',\n        location: '',\n        open: false\n    };\n    //해당 함수를 이용, 로그인 한 ID의 credentials값을 props로 받아 state값 재정의.\n    mapUserDetailsToState = (credentials) => { \n        this.setState({\n            bio: credentials.bio ? credentials.bio : '',\n            website: credentials.website ? credentials.website : '',\n            location: credentials.location ? credentials.location : ''\n        });\n    }\n\n    //해당 함수를 이용, open의 state값을 true전환.\n    handleOpen = () => {\n        this.setState({\n            open: true\n        })\n        this.mapUserDetailsToState(this.props.credentials);\n    }\n    //해당 함수를 이용, open의 state값을 false전환.\n    handleClose = () => {\n        this.setState({\n            open: false\n        })\n    }\n\n    //컴포넌트가 마운트 되었을때, props값을 credentials상수에 삽입, 그리고 mapUserDetailsToState에 그 값을 넘김. 결론적으로 json값의 유저 정보가서 Input에 사용자의 정보가 적어짐.\n    componentDidMount() {\n        const { credentials } = this.props\n        this.mapUserDetailsToState(credentials);\n    }\n\n    //Dialog의 input이 변경될때마다, 해당 값을 저장 및 변경.    \n    handleChange = (event)=> {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    //submit이벤트 발생시 handleChange함수에서 받은 userDetails상수의 bio, website, location값으로 변경.\n    handleSubmit = () => {\n        const userDetails = {\n            bio: this.state.bio,\n            website: this.state.website,\n            location: this.state.location,\n        };\n        //userActions(actions/userActions.js의 함수)의 editUserDetails함수를 가져와 실행.\n        //마지막 종료.\n        this.props.editUserDetails(userDetails);\n        this.handleClose();\n    }\n\n\n    render() {\n\n        const {classes} = this.props // 빠른 사용.\n\n        return (\n            <Fragment>\n                <MyButton tip=\"Edit details\" onClick={this.handleOpen} btnClassName={classes.button}>\n                    <EditIcon color=\"primary\" />\n                </MyButton>\n                <Dialog\n                open={this.state.open}//edit 아이콘을 클릭시 handleOpen함수를 통해 state: open:true로 변경됨에 따라 해당 Dialog값, open도 true로 변경됨. 결론적으로 열림.\n                onClose={this.handleClose}//이건 뭐 닫기지 ㅇㅇ\n                fullWidth\n                maxWidth=\"sm\">\n                    <DialogTitle>나를 바꿔방 L(ㅇ_ㅇ)ㄱ</DialogTitle>\n                    <DialogContent>\n                        <form>\n                            <TextField\n                            name=\"bio\"\n                            type=\"text\"\n                            label=\"Bio\"\n                            multiline\n                            rows=\"3\"\n                            placeholder=\"A short bio about yerself\"\n                            className={classes.TextField}\n                            value={this.state.bio} //여기의 값은 현제 state의 bio값.\n                            onChange={this.handleChange}//handleChange될떄마다 값이 현제 state에 저장됨.\n                            fullWidth\n                            />\n                            <TextField\n                            name=\"website\"\n                            type=\"text\"\n                            label=\"Website\"\n                            placeholder=\"your personal/professional website\"\n                            className={classes.TextField}\n                            value={this.state.website}\n                            onChange={this.handleChange}\n                            fullWidth\n                            />\n                            <TextField\n                            name=\"location\"\n                            type=\"text\"\n                            label=\"Location\"\n                            placeholder=\"where you live\"\n                            className={classes.TextField}\n                            value={this.state.location}\n                            onChange={this.handleChange}\n                            fullWidth\n                            />\n                        </form>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancle\n                        </Button>\n                        <Button onClick={this.handleSubmit} color=\"primary\">\n                            Save\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n// (해당 클래스이름).propTypes = {}\nEditDetails.propTypes = {\n    editUserDetails : PropTypes.func.isRequired,\n    classes : PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    credentials: state.user.credentials\n})\n\nexport default connect(mapStateToProps, {editUserDetails})(withStyles(styles)(EditDetails))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport NoImg from '../images/no-img.png'\n\n//mui\nimport Paper from '@material-ui/core/Paper'\n\n// Icons \nimport LocationOn from '@material-ui/icons/LocationOn'\nimport LinkIcon from '@material-ui/icons/Link'\nimport CalendarToday from '@material-ui/icons/CalendarToday';\n\nconst styles = theme => ({\n    ...theme,\n    handle: {\n        height: 20,\n        backgroundColor: theme.palette.primary.main,\n        width: 60,\n        margin: '0 auto 7px auto'\n      },\n      fullLine: {\n        height: 15,\n        backgroundColor: 'rgba(0,0,0,0.6)',\n        width: '100%',\n        marginBottom: 10\n      },\n      halfLine: {\n        height: 15,\n        backgroundColor: 'rgba(0,0,0,0.6)',\n        width: '50%',\n        marginBottom: 10\n      }\n})\n\nconst ProfileSkeleton = (props) => {\n    const { classes } = props;\n    return (\n        <Paper className={classes.paper}>\n            <div className={classes.profile} >\n                <div className=\"image-wrapper\">\n                    <img src={NoImg} alt=\"profile\" className=\"profile-image\" />\n                </div>\n                <hr />\n                <div className=\"profile-details\">\n                    <div className={classes.handle}/>\n                    <hr />\n                    <div className={classes.fullLine}/>\n                    <div className={classes.fullLine}/>\n                    <hr />\n                    <LocationOn color=\"primary\"/> <span>Location</span>\n                    <hr />\n                    <LinkIcon color=\"primary\" /> https://website.com\n                    <hr />\n                    <CalendarToday color=\"primary\" /> Joined date\n                </div>\n            </div>\n        </Paper>\n    )\n}\n\nProfileSkeleton.propTypes = {\n    classes: PropTypes.object.isRequired\n  };\n\nexport default withStyles(styles)(ProfileSkeleton)","import React, { Component, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport { Link } from 'react-router-dom'\nimport dayjs from 'dayjs'\nimport EditDetails from './EditDetails'\nimport MyButton from '../../util/MyButton'\nimport ProfileSkeleton from '../../util/ProfileSkeleton'\n\n\n//MUI stuff\nimport Button from '@material-ui/core/Button'\nimport MuiLink from '@material-ui/core/Link'\nimport Typography from '@material-ui/core/Typography'\nimport Paper  from '@material-ui/core/Paper'\n\n//Redux stuff\nimport { connect } from 'react-redux'\nimport { logoutUser, uploadImage} from '../../redux/actions/userActions';\n\n\n// Icons \nimport LocationOn from '@material-ui/icons/LocationOn'\nimport LinkIcon from '@material-ui/icons/Link'\nimport CalendarToday from '@material-ui/icons/CalendarToday'\nimport EditIcon from '@material-ui/icons/Edit'\nimport KeyboardReturn from '@material-ui/icons/KeyboardReturn'\n\n\nconst styles = (theme) => ({ \n    ...theme\n});\n\nclass Profile extends Component {\n\n    handleImageChange = (event) => {\n        const image = event.target.files[0];\n        //send to server \n        const formData = new FormData();\n        formData.append('image', image, image.name);\n        this.props.uploadImage(formData)\n    }\n    handleEitPicture = () => {\n        const fileInput = document.getElementById('imageInput');\n        fileInput.click();\n    }\n    handleLogout = () => {\n        this.props.logoutUser();\n    }\n    render() {\n        const {\n            classes,\n            user: {\n                credentials: {\n                    handle, createdAt, imageUrl, bio, website, location\n                },\n                loading,\n                authenticated\n            }\n            \n        } = this.props;\n\n        let profileMarkup = !loading ? (authenticated ? (\n            <Paper className={classes.parer}>\n                <div className={classes.profile}>\n                    <div className=\"image-wrapper\">\n                        <img className=\"profile-image\" src={imageUrl} alt=\"profile\" />\n                        <input type=\"file\" id=\"imageInput\" hidden=\"hidden\" onChange={this.handleImageChange} />\n                        <MyButton tip=\"Edit Profile picture\" onClick={this.handleEitPicture} btnClassName=\"button\">\n                            <EditIcon color=\"primary\" />\n                        </MyButton>\n                    </div>\n                    <hr />\n                    <div className=\"profile-details\">\n                        <MuiLink component={Link} to={`/users/${handle}`} color=\"primary\" variant=\"h5\">\n                            @{handle}\n                        </MuiLink>\n                        <hr />\n                        {bio && <Typography variant=\"body2\">{bio}</Typography>}\n                        <hr />\n                        {location && (\n                            <Fragment>\n                                <LocationOn color=\"primary\" /> <span>{location}</span>\n                            <hr />\n                            </Fragment>\n                        )}\n                        {website && (\n                            <Fragment>\n                                <LinkIcon color=\"primary\"/>\n                                <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {' '}{website}\n                                </a>\n                                <br />\n                            </Fragment>\n                        )}\n                        <CalendarToday color=\"primary\" /> {' '}\n                        <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>\n                    </div>\n\n                    <MyButton tip=\"Logout\" onClick={this.handleLogout} >\n                        <KeyboardReturn color=\"primary\" />\n                    </MyButton>\n                    <EditDetails />\n                </div>\n            </Paper>\n        ):(\n            <Paper className={classes.parer}>\n                <Typography variant=\"body2\" align=\"center\">\n                    No Profile found, please login again\n                </Typography>\n                <div className={classes.buttons}>\n                    <Button variant=\"contained\" color=\"primary\" component={Link} to=\"/login\">\n                        Login\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" component={Link} to=\"/signup\">\n                        signup\n                    </Button>\n                </div>\n            </Paper>\n        ) ) : (<ProfileSkeleton />)\n\n        return profileMarkup;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.user\n})\n\nconst mapActionsToProps = {logoutUser, uploadImage};\n\nProfile.propTypes ={\n    logoutUser: PropTypes.func.isRequired,\n    uploadImage: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired\n}\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Profile))","import React, {Fragment} from 'react'\nimport NoImg from '../images/no-img.png';\nimport PropTypes from 'prop-types'\n\n//mui\nimport Card from '@material-ui/core/Card'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CardContent from '@material-ui/core/CardContent'\n\nimport withStyles from '@material-ui/core/styles/withStyles'\n\nconst styles = theme => ({\n    ...theme,\n    card: {\n        display : 'flex',\n        marginBottom : 20,\n        \n    },\n    cardContent: {\n        width: '100%',\n        flexDirection: 'column',\n        padding : 25\n    },\n    cover: {\n        minWidth: 200,\n        objectFit: 'cover'\n    },\n    handle: {\n        width: 60,\n        height: 18,\n        backgroundColor: theme.palette.primary.main,\n        marginBottom: 7\n    },\n    date: {\n        width: 100,\n        height: 14,\n        backgroundColor: 'rgba(0,0,0, 0.3)',\n        marginBottom: 10\n    },\n    fullLine: {\n        width: 500,\n        height: 15,\n        backgroundColor: 'rgba(0,0,0, 0.6)',\n        marginBottom: 10\n    },\n    halfLine: {\n        width: '50%',\n        height: 15,\n        marginBottom: 10,\n        backgroundColor: 'rgba(0,0,0, 0.6)',\n    }\n})\n\n\nconst ScreamSkeleton = (props) => {\n    const {classes} = props;\n\n    const content = Array.from({ length: 5}).map((item, index) => (\n        <Card className={classes.card} key={index}>\n            <CardMedia className={classes.cover} image={NoImg}/>\n            <CardContent className={classes.CardContent}>\n                <div className={classes.handle}/>\n                <div className={classes.date}/>\n                <div className={classes.fullLine}/>\n                <div className={classes.fullLine}/>\n                <div className={classes.halfLine}/>\n            </CardContent>\n        </Card>\n    ))\n\n    return <Fragment>{content}</Fragment>\n}\n\nScreamSkeleton.propTypes ={\n    classes : PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(ScreamSkeleton)","import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid'\n// import axios from 'axios'\nimport PropTypes from 'prop-types'\n\nimport Scream from '../components/scream/Scream';\nimport Profile from '../components/profile/Profile'\nimport ScreamSkeleton from '../util/screamSkeleton'\n\nimport { connect } from 'react-redux'\nimport {getScreams} from '../redux/actions/dataActions'\n\nexport class home extends Component {\n\n    componentDidMount () {\n        this.props.getScreams();\n    }\n    //이거 콘솔에 뜸 뭔지 모르겠음\n    // componentWillUnmount () {\n    //     console.log(\"will unMount\")\n    // }\n    render() {\n        const { screams, loading} = this.props.data;\n\n        let recentScreamsMarkup = !loading ? (\n            screams.map((scream) => <Scream key={scream.screamId} scream={scream} />)\n        ) : (\n         <ScreamSkeleton />\n        );\n        return (\n            <Grid container spacing={16}>\n                <Grid item sm={8} xs={12}>\n                    {recentScreamsMarkup}\n                </Grid>\n                <Grid item sm={4} xs={12}>\n                    <Profile></Profile>\n                </Grid>\n            </Grid>\n            \n        )\n    }\n}\n\n\nhome.propTypes = {\n    getScreams : PropTypes.func.isRequired,\n    data: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    data: state.data\n})\n\nexport default connect(mapStateToProps, {getScreams})(home);","import React, { Component } from 'react'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport PropTypes from 'prop-types'\nimport AppIcon from '../images/icon.png'  \nimport {Link} from 'react-router-dom'\n\n// MUI Stuff\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\n//Redux stuff\nimport {connect} from 'react-redux'\nimport { loginUser } from '../redux/actions/userActions' ;\n\n\nconst styles = (theme) => ({\n  ...theme\n})\n\nexport class login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            errors : {}\n        }\n    }\n    //새로 받게될 props를 nextProps로 조회가능.\n    componentWillReceiveProps(nextProps) {\n      if(nextProps.UI.errors) {\n        this.setState({ errors: nextProps.UI.errors});\n      }\n    }\n    handleChange = (event)=> {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        \n        const userData = {\n          email: this.state.email,\n          password: this.state.password\n        };\n        this.props.loginUser(userData, this.props.history);\n        \n    }\n\n    render() {\n        const { classes, UI: {loading} } = this.props;\n        const {errors} = this.state;\n        return (\n            <Grid container className={classes.form}>\n                <Grid item sm/>\n                <Grid item sm>\n                    <img src={AppIcon} alt=\"default\" className={classes.image}/>\n                    <Typography variant=\"h2\" className={classes.pageTitle}>\n                        Login\n                    </Typography>\n                    <form noValidate onSubmit={this.handleSubmit}>\n                 <TextField\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  label=\"Email\"\n                  className={classes.textField}\n                  helperText={errors.email}\n                  error={errors.email ? true : false}\n                  value={this.state.email}\n                  onChange={this.handleChange}\n                  fullWidth\n                  />\n                  <TextField\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    label=\"password\"\n                    className={classes.textField}\n                    helperText={errors.password}\n                    error={errors.password ? true : false}\n                    value={this.state.password}\n                    onChange={this.handleChange}\n                    fullWidth\n                  />\n                   {errors.general && (\n                     <Typography variant=\"body2\" className={classes.customError}>\n                       {errors.general}\n                     </Typography>\n                   )}\n                   <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button} disabled={loading}>\n                     Login\n                     {loading && (\n                       <CircularProgress size={30} className={classes.progress}/>\n                     )}\n                   </Button>\n                   <br />\n                   <small>Dont have an account ? sign up <Link to=\"/signup\">here</Link></small>\n                    </form>\n                </Grid>\n                <Grid item sm/>\n            </Grid>\n        )\n    }\n}\n\nlogin.propTypes = {\n    classes : PropTypes.object.isRequired,\n    loginUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired,\n    UI: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n  user : state.user,\n  UI : state.UI\n});\n\nconst mapActionsToProps = {\n  loginUser\n}\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(login))","import React, { Component } from 'react'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport PropTypes from 'prop-types'\nimport AppIcon from '../images/icon.png'\n// import axios from 'axios'\nimport {Link} from 'react-router-dom'\n\n// MUI Stuff\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\n//Redux stuff\nimport { connect } from 'react-redux';\nimport { signupUser } from '../redux/actions/userActions'\n\nconst styles = (theme) => ({\n    ...theme\n})\n\n\n\nexport class signup extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            confirmPassword: '',\n            handle: '',\n            errors : {}\n        }\n    }\n    handleChange = (event)=> {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n      if(nextProps.UI.errors) {\n        this.setState({ errors: nextProps.UI.errors});\n      }\n    }\n\n    handleSubmit = (event) =>{\n        event.preventDefault();\n        this.setState({\n          loading: true\n        });\n        const newUserData = {\n          email: this.state.email,\n          password: this.state.password,\n          confirmPassword: this.state.confirmPassword,\n          handle: this.state.handle\n        }\n        this.props.signupUser(newUserData, this.props.history);\n    }\n\n    render() {\n        const { classes, UI: {loading} } = this.props;\n        const {errors} = this.state;\n        return (\n            <Grid container className={classes.form}>\n                <Grid item sm/>\n                <Grid item sm>\n                    <img src={AppIcon} alt=\"default\" className={classes.image}/>\n                    <Typography variant=\"h2\" className={classes.pageTitle}>\n                        Signup\n                    </Typography>\n                    <form noValidate onSubmit={this.handleSubmit}>\n                 <TextField id=\"email\" name=\"email\" type=\"email\" label=\"Email\" className={classes.textField} helperText={errors.email} error={errors.email ? true : false}\n                  value={this.state.email} onChange={this.handleChange} fullWidth />\n                  <TextField id=\"password\" name=\"password\" type=\"password\" label=\"password\" className={classes.textField} helperText={errors.password} error={errors.password ? true : false}\n                   value={this.state.password} onChange={this.handleChange} fullWidth />\n                   <TextField id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" label=\"Confirm Password\" className={classes.textField} helperText={errors.confirmPassword} error={errors.password ? true : false}\n                   value={this.state.confirmPassword} onChange={this.handleChange} fullWidth />\n                   <TextField id=\"handle\" name=\"handle\" type=\"text\" label=\"Handle\" className={classes.textField} helperText={errors.handle} error={errors.handle ? true : false}\n                   value={this.state.handle} onChange={this.handleChange} fullWidth />\n                   {errors.general && (\n                     <Typography variant=\"body2\" className={classes.customError}>\n                       {errors.general}\n                     </Typography>\n                   )}\n                   <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button} disabled={loading}>\n                     Signup\n                     {loading && (\n                       <CircularProgress size={30} className={classes.progress}/>\n                     )}\n                   </Button>\n                   <br />\n                   <small>Already have an account ? login <Link to=\"/signup\">here</Link></small>\n                    </form>\n                </Grid>\n                <Grid item sm/>\n            </Grid>\n        )\n    }\n}\n\nsignup.propTypes= {\n    classes : PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired,\n    UI: PropTypes.object.isRequired,\n    signupUser: PropTypes.func.isRequired\n}\n\nconst mapStateToProps= (state) => ({\n  user: state.user,\n  UI: state.UI\n})\n\n\n\nexport default connect(mapStateToProps, {signupUser }) (withStyles(styles)(signup));\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom'\n\n//MUI\nimport MuiLink from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n//Icons\nimport LocationOn from '@material-ui/icons/LocationOn';\nimport LinkIcon from '@material-ui/icons/Link'\nimport CalendarToday from '@material-ui/icons/CalendarToday'\n\nconst styles = (theme) => ({ \n  ...theme\n  });\n\n  const StaticProfile = (props) => {\n    const { classes, profile: {handle, createdAt, imageUrl, bio, website, location}} = props;\n\n    return (\n        <Paper className={classes.parer}>\n                <div className={classes.profile}>\n                    <div className=\"image-wrapper\">\n                        <img className=\"profile-image\" src={imageUrl} alt=\"profile\" />\n                    </div>\n                    <hr />\n                    <div className=\"profile-details\">\n                        <MuiLink component={Link} to={`/users/${handle}`} color=\"primary\" variant=\"h5\">\n                            @{handle}\n                        </MuiLink>\n                        <hr />\n                        {bio && <Typography variant=\"body2\">{bio}</Typography>}\n                        <hr />\n                        {location && (\n                            <Fragment>\n                                <LocationOn color=\"primary\" /> <span>{location}</span>\n                            <hr />\n                            </Fragment>\n                        )}\n                        {website && (\n                            <Fragment>\n                                <LinkIcon color=\"primary\"/>\n                                <a href={website} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {' '}{website}\n                                </a>\n                                <br />\n                            </Fragment>\n                        )}\n                        <CalendarToday color=\"primary\" /> {' '}\n                        <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>\n                    </div>\n                </div>\n            </Paper>\n    )\n  }\n\nStaticProfile.propTypes = {\n    profile: PropTypes.object.isRequired,\n    classes : PropTypes.object.isRequired\n}\n\n  export default withStyles(styles)(StaticProfile)","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Scream from \"../components/scream/Scream\";\nimport Grid from \"@material-ui/core/Grid\";\nimport StaticProfile from \"../components/profile/StaticProfile\";\nimport ScreamSkeleton from '../util/screamSkeleton'\nimport ProfileSkeleton from '../util/ProfileSkeleton'\n\nimport { connect } from \"react-redux\";\nimport { getUserData } from \"../redux/actions/dataActions\";\n\nexport class user extends Component {\n  state = {\n    profile: null,\n    screamIdParam: null,\n  };\n  componentDidMount() {\n    //handle은 내가 클릭한 유저의 파라미터 값 즉, URL의 파라미터 값을 가져온다.\n    const handle = this.props.match.params.handle;\n    const screamId = this.props.match.params.screamId;\n\n    if (screamId)\n      this.setState({\n        screamIdParam: screamId\n      });\n\n    // alert(`handle값이에용 :  ${handle}`);\n    this.props.getUserData(handle);\n    axios\n      .get(`/user/${handle}`)\n      .then(res => {\n        this.setState({\n          profile: res.data.user\n        });\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    const { screams, loading } = this.props.data;\n    // const { screamIdParam } = this.props;\n    const { screamIdParam } = this.state;\n\n    const screamsMarkup = loading ? (\n      <ScreamSkeleton />\n    ) : screams === null ? (\n      <p>No scream from this user</p>\n    ) : !screamIdParam ? (\n      screams.map(scream => <Scream key={scream.screamId} scream={scream} />)\n    ) : (\n      screams.map(scream => {\n        if (scream.screamId !== screamIdParam)\n          return <Scream key={scream.screamId} scream={scream} />;\n        else return <Scream key={scream.screamId} scream={scream} openDialog  />;\n      })\n    );\n\n    return (\n      <Grid container spacing={16}>\n        <Grid item sm={8} xs={12}>\n          {screamsMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {this.state.profile === null ? (\n            <ProfileSkeleton />\n          ) : (\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, { getUserData })(user);\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport MuiThemProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport themeFile from \"./util/theme\";\nimport jwtDecode from \"jwt-decode\";\n\n//Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { SET_AUTHENTICATED } from \"./redux/types\";\nimport { logoutUser, getUserData } from \"./redux/actions/userActions\";\n\n//component\nimport Navbar from \"./components/layout/Navbar\";\nimport AuthRoute from \"./util/AuthRoute\";\n\nimport home from \"./pages/home\";\nimport login from \"./pages/login\";\nimport signup from \"./pages/signup\";\nimport user from \"./pages/user\";\nimport axios from \"axios\";\n\nconst theme = createMuiTheme(themeFile);\n\naxios.defaults.baseURL = 'https://us-central1-socialape-32b84.cloudfunctions.net/api';\n\nconst token = localStorage.FBIdToken;\nif (token) {\n  const decodeToken = jwtDecode(token);\n  if (decodeToken.exp * 1000 < Date.now()) {\n    window.location.href = \"/login\";\n    store.dispatch(logoutUser());\n  } else {\n    store.dispatch({ type: SET_AUTHENTICATED });\n    axios.defaults.headers.common[\"Authorization\"] = token;\n    store.dispatch(getUserData());\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemProvider theme={theme}>\n        <Provider store={store}>\n          <Router>\n            <div className=\"container\">\n              <Navbar />\n              <Switch>\n                <Route exact path=\"/\" component={home} />\n                <AuthRoute exact path=\"/login\" component={login} />\n                <AuthRoute exact path=\"/signup\" component={signup} />\n                <Route exact path=\"/users/:handle\" component={user} />\n                <Route\n                  exact\n                  path=\"/users/:handle/scream/:screamId\"\n                  component={user}\n                />\n              </Switch>\n            </div>\n          </Router>\n        </Provider>\n      </MuiThemProvider>\n    );\n  }\n}\n\nexport default App;\n","//글로벌 CSS작성\nexport default {\n    palette : {\n      primary: {\n        light : '#33c9dc',\n        main : '#00bcd4',\n        dark : '#008394',\n        contrastText : '#fff'\n      },\n      secondary : {\n        light : '#ff6333',\n        main : '#ff3d00',\n        dark : '#b22a00',\n        contrastText : '#fff'\n      }\n    },\n    typography: {\n      useNextVariants : true\n    },\n    form : {\n      textAlign: 'center'\n  },\n  image: {\n      margin: '20px auto',\n      width: 500,\n      height: 200\n  },\n  pageTitle : {\n    margin: '10px auto',\n  },\n  textField: {\n    margin: '10px auto',\n  },\n  button: {\n    marginTop : 20,\n    position: 'relative'\n  },\n  customError: {\n    color: 'red',\n    fontSize: '0.8rem',\n    \n  },\n  progress: {\n    position: 'absolute',\n  \n  },\n  invisibleSeparator: {\n    border: 'none',\n    margin: 4\n  },\n  visibleSeparator : {\n    width: '100%',\n    borderBottom: '1px solidrgba(0,0,0,0.1)',\n    marginBottom: 20\n  },\n\n    paper: {\n    padding: 20\n  },\n  // profile: {\n  //   '& .image-wrapper': {\n  //     textAlign: 'center',\n  //     position: 'relative',\n  //     '& button': {\n  //       position: 'absolute',\n  //       top: '80%',\n  //       left: '70%'\n  //     }\n  //   },\n  //   '& .profile-image': {\n  //     width: 200,\n  //     height: 200,\n  //     objectFit: 'cover',\n  //     maxWidth: '100%',\n  //     borderRadius: '50%'\n  //   },\n  //   '& .profile-details': {\n  //     textAlign: 'center',\n  //     '& span, svg': {\n  //       verticalAlign: 'middle'\n  //     },\n  //     '& a': {\n  //       color: '#00bcd4'\n  //     }\n  //   },\n  //   '& hr': {\n  //     border: 'none',\n  //     margin: '0 0 10px 0'\n  //   },\n  //   '& svg.button': {\n  //     '&:hover': {\n  //       cursor: 'pointer'\n  //     }\n  //   }\n  // },\n  buttons: {\n    textAlign: 'center',\n    '& a': {\n      margin: '20px 10px'\n    }\n  },\n  profile: {\n    '& .image-wrapper': {\n      textAlign: 'center',\n      position: 'relative',\n    },\n    '& .profile-image': {\n      width: 200,\n      height: 200,\n      objectFit: 'cover',\n      maxWidth: '100%',\n      borderRadius: '50%'\n    },\n    '& .profile-details': {\n      textAlign: 'center',\n      '& span, svg': {\n        verticalAlign: 'middle'\n      },\n      '& a': {\n        color: '#00bcd4'\n      }\n    },\n    '& hr': {\n      border: 'none',\n      margin: '0 0 10px 0'\n    }\n    \n  }\n  \n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/no-img.a77a9fc1.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.19855ef4.png\";"],"sourceRoot":""}